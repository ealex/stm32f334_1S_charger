
stm32f334_1S_charger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b60  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004ce8  08004ce8  00014ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d18  08004d18  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004d18  08004d18  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d18  08004d18  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d18  08004d18  00014d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d1c  08004d1c  00014d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004d20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  2000000c  08004d2c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08004d2c  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f554  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000234b  00000000  00000000  0002f590  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d08  00000000  00000000  000318e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bc0  00000000  00000000  000325e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001dfd9  00000000  00000000  000331a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d250  00000000  00000000  00051181  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b7960  00000000  00000000  0005e3d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00115d31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003554  00000000  00000000  00115dac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004cd0 	.word	0x08004cd0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004cd0 	.word	0x08004cd0

080001c8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b08a      	sub	sp, #40	; 0x28
 80001cc:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80001ce:	f107 031c 	add.w	r3, r7, #28
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80001da:	1d3b      	adds	r3, r7, #4
 80001dc:	2200      	movs	r2, #0
 80001de:	601a      	str	r2, [r3, #0]
 80001e0:	605a      	str	r2, [r3, #4]
 80001e2:	609a      	str	r2, [r3, #8]
 80001e4:	60da      	str	r2, [r3, #12]
 80001e6:	611a      	str	r2, [r3, #16]
 80001e8:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80001ea:	4b43      	ldr	r3, [pc, #268]	; (80002f8 <MX_ADC1_Init+0x130>)
 80001ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80001f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80001f2:	4b41      	ldr	r3, [pc, #260]	; (80002f8 <MX_ADC1_Init+0x130>)
 80001f4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80001f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80001fa:	4b3f      	ldr	r3, [pc, #252]	; (80002f8 <MX_ADC1_Init+0x130>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000200:	4b3d      	ldr	r3, [pc, #244]	; (80002f8 <MX_ADC1_Init+0x130>)
 8000202:	2201      	movs	r2, #1
 8000204:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000206:	4b3c      	ldr	r3, [pc, #240]	; (80002f8 <MX_ADC1_Init+0x130>)
 8000208:	2200      	movs	r2, #0
 800020a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800020c:	4b3a      	ldr	r3, [pc, #232]	; (80002f8 <MX_ADC1_Init+0x130>)
 800020e:	2200      	movs	r2, #0
 8000210:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000214:	4b38      	ldr	r3, [pc, #224]	; (80002f8 <MX_ADC1_Init+0x130>)
 8000216:	2200      	movs	r2, #0
 8000218:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800021a:	4b37      	ldr	r3, [pc, #220]	; (80002f8 <MX_ADC1_Init+0x130>)
 800021c:	2201      	movs	r2, #1
 800021e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000220:	4b35      	ldr	r3, [pc, #212]	; (80002f8 <MX_ADC1_Init+0x130>)
 8000222:	2200      	movs	r2, #0
 8000224:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000226:	4b34      	ldr	r3, [pc, #208]	; (80002f8 <MX_ADC1_Init+0x130>)
 8000228:	2204      	movs	r2, #4
 800022a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800022c:	4b32      	ldr	r3, [pc, #200]	; (80002f8 <MX_ADC1_Init+0x130>)
 800022e:	2200      	movs	r2, #0
 8000230:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000234:	4b30      	ldr	r3, [pc, #192]	; (80002f8 <MX_ADC1_Init+0x130>)
 8000236:	2208      	movs	r2, #8
 8000238:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800023a:	4b2f      	ldr	r3, [pc, #188]	; (80002f8 <MX_ADC1_Init+0x130>)
 800023c:	2200      	movs	r2, #0
 800023e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000240:	4b2d      	ldr	r3, [pc, #180]	; (80002f8 <MX_ADC1_Init+0x130>)
 8000242:	2200      	movs	r2, #0
 8000244:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000246:	482c      	ldr	r0, [pc, #176]	; (80002f8 <MX_ADC1_Init+0x130>)
 8000248:	f000 fcd8 	bl	8000bfc <HAL_ADC_Init>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000252:	f000 fbab 	bl	80009ac <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000256:	2300      	movs	r3, #0
 8000258:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800025a:	f107 031c 	add.w	r3, r7, #28
 800025e:	4619      	mov	r1, r3
 8000260:	4825      	ldr	r0, [pc, #148]	; (80002f8 <MX_ADC1_Init+0x130>)
 8000262:	f001 fb67 	bl	8001934 <HAL_ADCEx_MultiModeConfigChannel>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d001      	beq.n	8000270 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 800026c:	f000 fb9e 	bl	80009ac <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000270:	2301      	movs	r3, #1
 8000272:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000274:	2301      	movs	r3, #1
 8000276:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000278:	2300      	movs	r3, #0
 800027a:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 800027c:	2307      	movs	r3, #7
 800027e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000280:	2300      	movs	r3, #0
 8000282:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000284:	2300      	movs	r3, #0
 8000286:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	4619      	mov	r1, r3
 800028c:	481a      	ldr	r0, [pc, #104]	; (80002f8 <MX_ADC1_Init+0x130>)
 800028e:	f001 f88f 	bl	80013b0 <HAL_ADC_ConfigChannel>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000298:	f000 fb88 	bl	80009ac <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800029c:	2302      	movs	r3, #2
 800029e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80002a0:	2302      	movs	r3, #2
 80002a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	4619      	mov	r1, r3
 80002a8:	4813      	ldr	r0, [pc, #76]	; (80002f8 <MX_ADC1_Init+0x130>)
 80002aa:	f001 f881 	bl	80013b0 <HAL_ADC_ConfigChannel>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 80002b4:	f000 fb7a 	bl	80009ac <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80002b8:	2303      	movs	r3, #3
 80002ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80002bc:	2303      	movs	r3, #3
 80002be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	4619      	mov	r1, r3
 80002c4:	480c      	ldr	r0, [pc, #48]	; (80002f8 <MX_ADC1_Init+0x130>)
 80002c6:	f001 f873 	bl	80013b0 <HAL_ADC_ConfigChannel>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 80002d0:	f000 fb6c 	bl	80009ac <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80002d4:	2304      	movs	r3, #4
 80002d6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80002d8:	2304      	movs	r3, #4
 80002da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	4619      	mov	r1, r3
 80002e0:	4805      	ldr	r0, [pc, #20]	; (80002f8 <MX_ADC1_Init+0x130>)
 80002e2:	f001 f865 	bl	80013b0 <HAL_ADC_ConfigChannel>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 80002ec:	f000 fb5e 	bl	80009ac <Error_Handler>
  }

}
 80002f0:	bf00      	nop
 80002f2:	3728      	adds	r7, #40	; 0x28
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	20000028 	.word	0x20000028

080002fc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b08a      	sub	sp, #40	; 0x28
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000304:	f107 0314 	add.w	r3, r7, #20
 8000308:	2200      	movs	r2, #0
 800030a:	601a      	str	r2, [r3, #0]
 800030c:	605a      	str	r2, [r3, #4]
 800030e:	609a      	str	r2, [r3, #8]
 8000310:	60da      	str	r2, [r3, #12]
 8000312:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800031c:	d12c      	bne.n	8000378 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800031e:	4b18      	ldr	r3, [pc, #96]	; (8000380 <HAL_ADC_MspInit+0x84>)
 8000320:	695b      	ldr	r3, [r3, #20]
 8000322:	4a17      	ldr	r2, [pc, #92]	; (8000380 <HAL_ADC_MspInit+0x84>)
 8000324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000328:	6153      	str	r3, [r2, #20]
 800032a:	4b15      	ldr	r3, [pc, #84]	; (8000380 <HAL_ADC_MspInit+0x84>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000332:	613b      	str	r3, [r7, #16]
 8000334:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000336:	4b12      	ldr	r3, [pc, #72]	; (8000380 <HAL_ADC_MspInit+0x84>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a11      	ldr	r2, [pc, #68]	; (8000380 <HAL_ADC_MspInit+0x84>)
 800033c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b0f      	ldr	r3, [pc, #60]	; (8000380 <HAL_ADC_MspInit+0x84>)
 8000344:	695b      	ldr	r3, [r3, #20]
 8000346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800034a:	60fb      	str	r3, [r7, #12]
 800034c:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800034e:	230f      	movs	r3, #15
 8000350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000352:	2303      	movs	r3, #3
 8000354:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000356:	2300      	movs	r3, #0
 8000358:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800035a:	f107 0314 	add.w	r3, r7, #20
 800035e:	4619      	mov	r1, r3
 8000360:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000364:	f001 fe34 	bl	8001fd0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000368:	2200      	movs	r2, #0
 800036a:	2100      	movs	r1, #0
 800036c:	2012      	movs	r0, #18
 800036e:	f001 fd6e 	bl	8001e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000372:	2012      	movs	r0, #18
 8000374:	f001 fd87 	bl	8001e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000378:	bf00      	nop
 800037a:	3728      	adds	r7, #40	; 0x28
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	40021000 	.word	0x40021000

08000384 <MX_COMP2_Init>:

COMP_HandleTypeDef hcomp2;

/* COMP2 init function */
void MX_COMP2_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0

  hcomp2.Instance = COMP2;
 8000388:	4b0f      	ldr	r3, [pc, #60]	; (80003c8 <MX_COMP2_Init+0x44>)
 800038a:	4a10      	ldr	r2, [pc, #64]	; (80003cc <MX_COMP2_Init+0x48>)
 800038c:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1_CH1;
 800038e:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <MX_COMP2_Init+0x44>)
 8000390:	2240      	movs	r2, #64	; 0x40
 8000392:	605a      	str	r2, [r3, #4]
  hcomp2.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8000394:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <MX_COMP2_Init+0x44>)
 8000396:	2200      	movs	r2, #0
 8000398:	609a      	str	r2, [r3, #8]
  hcomp2.Init.Output = COMP_OUTPUT_NONE;
 800039a:	4b0b      	ldr	r3, [pc, #44]	; (80003c8 <MX_COMP2_Init+0x44>)
 800039c:	222a      	movs	r2, #42	; 0x2a
 800039e:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80003a0:	4b09      	ldr	r3, [pc, #36]	; (80003c8 <MX_COMP2_Init+0x44>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	611a      	str	r2, [r3, #16]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 80003a6:	4b08      	ldr	r3, [pc, #32]	; (80003c8 <MX_COMP2_Init+0x44>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	619a      	str	r2, [r3, #24]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80003ac:	4b06      	ldr	r3, [pc, #24]	; (80003c8 <MX_COMP2_Init+0x44>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 80003b2:	4805      	ldr	r0, [pc, #20]	; (80003c8 <MX_COMP2_Init+0x44>)
 80003b4:	f001 fbe4 	bl	8001b80 <HAL_COMP_Init>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_COMP2_Init+0x3e>
  {
    Error_Handler();
 80003be:	f000 faf5 	bl	80009ac <Error_Handler>
  }

}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	20000078 	.word	0x20000078
 80003cc:	40010020 	.word	0x40010020

080003d0 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b088      	sub	sp, #32
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d8:	f107 030c 	add.w	r3, r7, #12
 80003dc:	2200      	movs	r2, #0
 80003de:	601a      	str	r2, [r3, #0]
 80003e0:	605a      	str	r2, [r3, #4]
 80003e2:	609a      	str	r2, [r3, #8]
 80003e4:	60da      	str	r2, [r3, #12]
 80003e6:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP2)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a0f      	ldr	r2, [pc, #60]	; (800042c <HAL_COMP_MspInit+0x5c>)
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d118      	bne.n	8000424 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f2:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <HAL_COMP_MspInit+0x60>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	4a0e      	ldr	r2, [pc, #56]	; (8000430 <HAL_COMP_MspInit+0x60>)
 80003f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003fc:	6153      	str	r3, [r2, #20]
 80003fe:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <HAL_COMP_MspInit+0x60>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000406:	60bb      	str	r3, [r7, #8]
 8000408:	68bb      	ldr	r3, [r7, #8]
    /**COMP2 GPIO Configuration    
    PA4     ------> COMP2_INM
    PA7     ------> COMP2_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 800040a:	2390      	movs	r3, #144	; 0x90
 800040c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800040e:	2303      	movs	r3, #3
 8000410:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000412:	2300      	movs	r3, #0
 8000414:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000416:	f107 030c 	add.w	r3, r7, #12
 800041a:	4619      	mov	r1, r3
 800041c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000420:	f001 fdd6 	bl	8001fd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
}
 8000424:	bf00      	nop
 8000426:	3720      	adds	r7, #32
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	40010020 	.word	0x40010020
 8000430:	40021000 	.word	0x40021000

08000434 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b084      	sub	sp, #16
 8000438:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800043a:	1d3b      	adds	r3, r7, #4
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
 8000440:	605a      	str	r2, [r3, #4]
 8000442:	609a      	str	r2, [r3, #8]

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8000444:	4b0e      	ldr	r3, [pc, #56]	; (8000480 <MX_DAC1_Init+0x4c>)
 8000446:	4a0f      	ldr	r2, [pc, #60]	; (8000484 <MX_DAC1_Init+0x50>)
 8000448:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800044a:	480d      	ldr	r0, [pc, #52]	; (8000480 <MX_DAC1_Init+0x4c>)
 800044c:	f001 fd35 	bl	8001eba <HAL_DAC_Init>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8000456:	f000 faa9 	bl	80009ac <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800045a:	2300      	movs	r3, #0
 800045c:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800045e:	2300      	movs	r3, #0
 8000460:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000462:	1d3b      	adds	r3, r7, #4
 8000464:	2200      	movs	r2, #0
 8000466:	4619      	mov	r1, r3
 8000468:	4805      	ldr	r0, [pc, #20]	; (8000480 <MX_DAC1_Init+0x4c>)
 800046a:	f001 fd49 	bl	8001f00 <HAL_DAC_ConfigChannel>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8000474:	f000 fa9a 	bl	80009ac <Error_Handler>
  }

}
 8000478:	bf00      	nop
 800047a:	3710      	adds	r7, #16
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	200000a8 	.word	0x200000a8
 8000484:	40007400 	.word	0x40007400

08000488 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b08a      	sub	sp, #40	; 0x28
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000490:	f107 0314 	add.w	r3, r7, #20
 8000494:	2200      	movs	r2, #0
 8000496:	601a      	str	r2, [r3, #0]
 8000498:	605a      	str	r2, [r3, #4]
 800049a:	609a      	str	r2, [r3, #8]
 800049c:	60da      	str	r2, [r3, #12]
 800049e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a15      	ldr	r2, [pc, #84]	; (80004fc <HAL_DAC_MspInit+0x74>)
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d124      	bne.n	80004f4 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80004aa:	4b15      	ldr	r3, [pc, #84]	; (8000500 <HAL_DAC_MspInit+0x78>)
 80004ac:	69db      	ldr	r3, [r3, #28]
 80004ae:	4a14      	ldr	r2, [pc, #80]	; (8000500 <HAL_DAC_MspInit+0x78>)
 80004b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80004b4:	61d3      	str	r3, [r2, #28]
 80004b6:	4b12      	ldr	r3, [pc, #72]	; (8000500 <HAL_DAC_MspInit+0x78>)
 80004b8:	69db      	ldr	r3, [r3, #28]
 80004ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80004be:	613b      	str	r3, [r7, #16]
 80004c0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c2:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <HAL_DAC_MspInit+0x78>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	4a0e      	ldr	r2, [pc, #56]	; (8000500 <HAL_DAC_MspInit+0x78>)
 80004c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004cc:	6153      	str	r3, [r2, #20]
 80004ce:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <HAL_DAC_MspInit+0x78>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004d6:	60fb      	str	r3, [r7, #12]
 80004d8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80004da:	2310      	movs	r3, #16
 80004dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004de:	2303      	movs	r3, #3
 80004e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e2:	2300      	movs	r3, #0
 80004e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e6:	f107 0314 	add.w	r3, r7, #20
 80004ea:	4619      	mov	r1, r3
 80004ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f0:	f001 fd6e 	bl	8001fd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80004f4:	bf00      	nop
 80004f6:	3728      	adds	r7, #40	; 0x28
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40007400 	.word	0x40007400
 8000500:	40021000 	.word	0x40021000

08000504 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b088      	sub	sp, #32
 8000508:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050a:	f107 030c 	add.w	r3, r7, #12
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800051a:	4b32      	ldr	r3, [pc, #200]	; (80005e4 <MX_GPIO_Init+0xe0>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	4a31      	ldr	r2, [pc, #196]	; (80005e4 <MX_GPIO_Init+0xe0>)
 8000520:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000524:	6153      	str	r3, [r2, #20]
 8000526:	4b2f      	ldr	r3, [pc, #188]	; (80005e4 <MX_GPIO_Init+0xe0>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000532:	4b2c      	ldr	r3, [pc, #176]	; (80005e4 <MX_GPIO_Init+0xe0>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	4a2b      	ldr	r2, [pc, #172]	; (80005e4 <MX_GPIO_Init+0xe0>)
 8000538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800053c:	6153      	str	r3, [r2, #20]
 800053e:	4b29      	ldr	r3, [pc, #164]	; (80005e4 <MX_GPIO_Init+0xe0>)
 8000540:	695b      	ldr	r3, [r3, #20]
 8000542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800054a:	4b26      	ldr	r3, [pc, #152]	; (80005e4 <MX_GPIO_Init+0xe0>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	4a25      	ldr	r2, [pc, #148]	; (80005e4 <MX_GPIO_Init+0xe0>)
 8000550:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000554:	6153      	str	r3, [r2, #20]
 8000556:	4b23      	ldr	r3, [pc, #140]	; (80005e4 <MX_GPIO_Init+0xe0>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800055e:	603b      	str	r3, [r7, #0]
 8000560:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000562:	2200      	movs	r2, #0
 8000564:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8000568:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800056c:	f001 fea2 	bl	80022b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000570:	2303      	movs	r3, #3
 8000572:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000574:	2303      	movs	r3, #3
 8000576:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000578:	2300      	movs	r3, #0
 800057a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	4619      	mov	r1, r3
 8000582:	4819      	ldr	r0, [pc, #100]	; (80005e8 <MX_GPIO_Init+0xe4>)
 8000584:	f001 fd24 	bl	8001fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15;
 8000588:	f248 0360 	movw	r3, #32864	; 0x8060
 800058c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800058e:	2303      	movs	r3, #3
 8000590:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	2300      	movs	r3, #0
 8000594:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000596:	f107 030c 	add.w	r3, r7, #12
 800059a:	4619      	mov	r1, r3
 800059c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a0:	f001 fd16 	bl	8001fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB3 PB4 
                           PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4 
 80005a4:	23fb      	movs	r3, #251	; 0xfb
 80005a6:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005a8:	2303      	movs	r3, #3
 80005aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ac:	2300      	movs	r3, #0
 80005ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b0:	f107 030c 	add.w	r3, r7, #12
 80005b4:	4619      	mov	r1, r3
 80005b6:	480d      	ldr	r0, [pc, #52]	; (80005ec <MX_GPIO_Init+0xe8>)
 80005b8:	f001 fd0a 	bl	8001fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80005bc:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80005c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c2:	2301      	movs	r3, #1
 80005c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ce:	f107 030c 	add.w	r3, r7, #12
 80005d2:	4619      	mov	r1, r3
 80005d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d8:	f001 fcfa 	bl	8001fd0 <HAL_GPIO_Init>

}
 80005dc:	bf00      	nop
 80005de:	3720      	adds	r7, #32
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40021000 	.word	0x40021000
 80005e8:	48001400 	.word	0x48001400
 80005ec:	48000400 	.word	0x48000400

080005f0 <MX_HRTIM1_Init>:

HRTIM_HandleTypeDef hhrtim1;

/* HRTIM1 init function */
void MX_HRTIM1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b0ac      	sub	sp, #176	; 0xb0
 80005f4:	af00      	add	r7, sp, #0
  HRTIM_EventCfgTypeDef pEventCfg = {0};
 80005f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8000606:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
 8000612:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8000614:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000618:	2254      	movs	r2, #84	; 0x54
 800061a:	2100      	movs	r1, #0
 800061c:	4618      	mov	r0, r3
 800061e:	f004 fb4f 	bl	8004cc0 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8000622:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
  HRTIM_TimerEventFilteringCfgTypeDef pTimerEventFilteringCfg = {0};
 800062e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	2220      	movs	r2, #32
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f004 fb3e 	bl	8004cc0 <memset>

  hhrtim1.Instance = HRTIM1;
 8000644:	4b74      	ldr	r3, [pc, #464]	; (8000818 <MX_HRTIM1_Init+0x228>)
 8000646:	4a75      	ldr	r2, [pc, #468]	; (800081c <MX_HRTIM1_Init+0x22c>)
 8000648:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 800064a:	4b73      	ldr	r3, [pc, #460]	; (8000818 <MX_HRTIM1_Init+0x228>)
 800064c:	2200      	movs	r2, #0
 800064e:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8000650:	4b71      	ldr	r3, [pc, #452]	; (8000818 <MX_HRTIM1_Init+0x228>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 8000656:	4870      	ldr	r0, [pc, #448]	; (8000818 <MX_HRTIM1_Init+0x228>)
 8000658:	f001 fe44 	bl	80022e4 <HAL_HRTIM_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_HRTIM1_Init+0x76>
  {
    Error_Handler();
 8000662:	f000 f9a3 	bl	80009ac <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_14) != HAL_OK)
 8000666:	210c      	movs	r1, #12
 8000668:	486b      	ldr	r0, [pc, #428]	; (8000818 <MX_HRTIM1_Init+0x228>)
 800066a:	f001 ff07 	bl	800247c <HAL_HRTIM_DLLCalibrationStart>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_HRTIM1_Init+0x88>
  {
    Error_Handler();
 8000674:	f000 f99a 	bl	80009ac <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 8000678:	210a      	movs	r1, #10
 800067a:	4867      	ldr	r0, [pc, #412]	; (8000818 <MX_HRTIM1_Init+0x228>)
 800067c:	f001 ff52 	bl	8002524 <HAL_HRTIM_PollForDLLCalibration>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_HRTIM1_Init+0x9a>
  {
    Error_Handler();
 8000686:	f000 f991 	bl	80009ac <Error_Handler>
  }
  if (HAL_HRTIM_EventPrescalerConfig(&hhrtim1, HRTIM_EVENTPRESCALER_DIV1) != HAL_OK)
 800068a:	2100      	movs	r1, #0
 800068c:	4862      	ldr	r0, [pc, #392]	; (8000818 <MX_HRTIM1_Init+0x228>)
 800068e:	f001 ffd4 	bl	800263a <HAL_HRTIM_EventPrescalerConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_HRTIM1_Init+0xac>
  {
    Error_Handler();
 8000698:	f000 f988 	bl	80009ac <Error_Handler>
  }
  pEventCfg.Source = HRTIM_EVENTSRC_2;
 800069c:	2301      	movs	r3, #1
 800069e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  pEventCfg.Polarity = HRTIM_EVENTPOLARITY_HIGH;
 80006a2:	2300      	movs	r3, #0
 80006a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  pEventCfg.Sensitivity = HRTIM_EVENTSENSITIVITY_RISINGEDGE;
 80006a8:	2308      	movs	r3, #8
 80006aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  pEventCfg.FastMode = HRTIM_EVENTFASTMODE_DISABLE;
 80006ae:	2300      	movs	r3, #0
 80006b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_HRTIM_EventConfig(&hhrtim1, HRTIM_EVENT_1, &pEventCfg) != HAL_OK)
 80006b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006b8:	461a      	mov	r2, r3
 80006ba:	2101      	movs	r1, #1
 80006bc:	4856      	ldr	r0, [pc, #344]	; (8000818 <MX_HRTIM1_Init+0x228>)
 80006be:	f001 ff8d 	bl	80025dc <HAL_HRTIM_EventConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_HRTIM1_Init+0xdc>
  {
    Error_Handler();
 80006c8:	f000 f970 	bl	80009ac <Error_Handler>
  }
  pTimeBaseCfg.Period = 0xA000;
 80006cc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80006d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  pTimeBaseCfg.RepetitionCounter = 0x00;
 80006d4:	2300      	movs	r3, #0
 80006d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 80006da:	2300      	movs	r3, #0
 80006dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 80006e0:	2308      	movs	r3, #8
 80006e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 80006e6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80006ea:	461a      	mov	r2, r3
 80006ec:	2100      	movs	r1, #0
 80006ee:	484a      	ldr	r0, [pc, #296]	; (8000818 <MX_HRTIM1_Init+0x228>)
 80006f0:	f001 ff4c 	bl	800258c <HAL_HRTIM_TimeBaseConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_HRTIM1_Init+0x10e>
  {
    Error_Handler();
 80006fa:	f000 f957 	bl	80009ac <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 80006fe:	2300      	movs	r3, #0
 8000700:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8000702:	2300      	movs	r3, #0
 8000704:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.DMASrcAddress = 0x0000;
 8000706:	2300      	movs	r3, #0
 8000708:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.DMADstAddress = 0x0000;
 800070a:	2300      	movs	r3, #0
 800070c:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.DMASize = 0x1;
 800070e:	2301      	movs	r3, #1
 8000710:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8000712:	2300      	movs	r3, #0
 8000714:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8000716:	2300      	movs	r3, #0
 8000718:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 800071a:	2300      	movs	r3, #0
 800071c:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 800071e:	2300      	movs	r3, #0
 8000720:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8000722:	2300      	movs	r3, #0
 8000724:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8000726:	2300      	movs	r3, #0
 8000728:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 800072a:	2300      	movs	r3, #0
 800072c:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 800072e:	2300      	movs	r3, #0
 8000730:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8000732:	2300      	movs	r3, #0
 8000734:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8000736:	2300      	movs	r3, #0
 8000738:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 800073a:	2300      	movs	r3, #0
 800073c:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 800073e:	2300      	movs	r3, #0
 8000740:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8000742:	2300      	movs	r3, #0
 8000744:	67fb      	str	r3, [r7, #124]	; 0x7c
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8000746:	2300      	movs	r3, #0
 8000748:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 800074c:	2300      	movs	r3, #0
 800074e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8000752:	2300      	movs	r3, #0
 8000754:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8000758:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800075c:	461a      	mov	r2, r3
 800075e:	2100      	movs	r1, #0
 8000760:	482d      	ldr	r0, [pc, #180]	; (8000818 <MX_HRTIM1_Init+0x228>)
 8000762:	f001 ffa3 	bl	80026ac <HAL_HRTIM_WaveformTimerConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_HRTIM1_Init+0x180>
  {
    Error_Handler();
 800076c:	f000 f91e 	bl	80009ac <Error_Handler>
  }
  pCompareCfg.CompareValue = 0x0100;
 8000770:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000774:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000776:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800077a:	2201      	movs	r2, #1
 800077c:	2100      	movs	r1, #0
 800077e:	4826      	ldr	r0, [pc, #152]	; (8000818 <MX_HRTIM1_Init+0x228>)
 8000780:	f002 f962 	bl	8002a48 <HAL_HRTIM_WaveformCompareConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_HRTIM1_Init+0x19e>
  {
    Error_Handler();
 800078a:	f000 f90f 	bl	80009ac <Error_Handler>
  }
  pCompareCfg.CompareValue = 0x3000;
 800078e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000792:	62fb      	str	r3, [r7, #44]	; 0x2c
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8000794:	2300      	movs	r3, #0
 8000796:	633b      	str	r3, [r7, #48]	; 0x30
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 8000798:	2300      	movs	r3, #0
 800079a:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 800079c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007a0:	2202      	movs	r2, #2
 80007a2:	2100      	movs	r1, #0
 80007a4:	481c      	ldr	r0, [pc, #112]	; (8000818 <MX_HRTIM1_Init+0x228>)
 80007a6:	f002 f94f 	bl	8002a48 <HAL_HRTIM_WaveformCompareConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_HRTIM1_Init+0x1c4>
  {
    Error_Handler();
 80007b0:	f000 f8fc 	bl	80009ac <Error_Handler>
  }
  pTimerEventFilteringCfg.Filter = HRTIM_TIMEVENTFILTER_BLANKINGCMP1;
 80007b4:	2302      	movs	r3, #2
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
  pTimerEventFilteringCfg.Latch = HRTIM_TIMEVENTLATCH_DISABLED;
 80007b8:	2300      	movs	r3, #0
 80007ba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_HRTIM_TimerEventFilteringConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_EVENT_1, &pTimerEventFilteringCfg) != HAL_OK)
 80007bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c0:	2201      	movs	r2, #1
 80007c2:	2100      	movs	r1, #0
 80007c4:	4814      	ldr	r0, [pc, #80]	; (8000818 <MX_HRTIM1_Init+0x228>)
 80007c6:	f001 ffe3 	bl	8002790 <HAL_HRTIM_TimerEventFilteringConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_HRTIM1_Init+0x1e4>
  {
    Error_Handler();
 80007d0:	f000 f8ec 	bl	80009ac <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 80007d4:	2300      	movs	r3, #0
 80007d6:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMPER;
 80007d8:	2304      	movs	r3, #4
 80007da:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_EEV_1|HRTIM_OUTPUTRESET_TIMCMP2;
 80007dc:	4b10      	ldr	r3, [pc, #64]	; (8000820 <MX_HRTIM1_Init+0x230>)
 80007de:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 80007f0:	2300      	movs	r3, #0
 80007f2:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2201      	movs	r2, #1
 80007f8:	2100      	movs	r1, #0
 80007fa:	4807      	ldr	r0, [pc, #28]	; (8000818 <MX_HRTIM1_Init+0x228>)
 80007fc:	f002 fa92 	bl	8002d24 <HAL_HRTIM_WaveformOutputConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_HRTIM1_Init+0x21a>
  {
    Error_Handler();
 8000806:	f000 f8d1 	bl	80009ac <Error_Handler>
  }
  HAL_HRTIM_MspPostInit(&hhrtim1);
 800080a:	4803      	ldr	r0, [pc, #12]	; (8000818 <MX_HRTIM1_Init+0x228>)
 800080c:	f000 f82a 	bl	8000864 <HAL_HRTIM_MspPostInit>

}
 8000810:	bf00      	nop
 8000812:	37b0      	adds	r7, #176	; 0xb0
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	200000bc 	.word	0x200000bc
 800081c:	40017400 	.word	0x40017400
 8000820:	00200010 	.word	0x00200010

08000824 <HAL_HRTIM_MspInit>:

void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]

  if(hrtimHandle->Instance==HRTIM1)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a0a      	ldr	r2, [pc, #40]	; (800085c <HAL_HRTIM_MspInit+0x38>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d10b      	bne.n	800084e <HAL_HRTIM_MspInit+0x2a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* HRTIM1 clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8000836:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <HAL_HRTIM_MspInit+0x3c>)
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	4a09      	ldr	r2, [pc, #36]	; (8000860 <HAL_HRTIM_MspInit+0x3c>)
 800083c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000840:	6193      	str	r3, [r2, #24]
 8000842:	4b07      	ldr	r3, [pc, #28]	; (8000860 <HAL_HRTIM_MspInit+0x3c>)
 8000844:	699b      	ldr	r3, [r3, #24]
 8000846:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }
}
 800084e:	bf00      	nop
 8000850:	3714      	adds	r7, #20
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	40017400 	.word	0x40017400
 8000860:	40021000 	.word	0x40021000

08000864 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b088      	sub	sp, #32
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
  if(hrtimHandle->Instance==HRTIM1)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a12      	ldr	r2, [pc, #72]	; (80008cc <HAL_HRTIM_MspPostInit+0x68>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d11d      	bne.n	80008c2 <HAL_HRTIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <HAL_HRTIM_MspPostInit+0x6c>)
 8000888:	695b      	ldr	r3, [r3, #20]
 800088a:	4a11      	ldr	r2, [pc, #68]	; (80008d0 <HAL_HRTIM_MspPostInit+0x6c>)
 800088c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000890:	6153      	str	r3, [r2, #20]
 8000892:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <HAL_HRTIM_MspPostInit+0x6c>)
 8000894:	695b      	ldr	r3, [r3, #20]
 8000896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
    /**HRTIM1 GPIO Configuration    
    PA8     ------> HRTIM1_CHA1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800089e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ac:	2303      	movs	r3, #3
 80008ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 80008b0:	230d      	movs	r3, #13
 80008b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	4619      	mov	r1, r3
 80008ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008be:	f001 fb87 	bl	8001fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 80008c2:	bf00      	nop
 80008c4:	3720      	adds	r7, #32
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40017400 	.word	0x40017400
 80008d0:	40021000 	.word	0x40021000

080008d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d8:	f000 f90c 	bl	8000af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008dc:	f000 f80b 	bl	80008f6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e0:	f7ff fe10 	bl	8000504 <MX_GPIO_Init>
  MX_COMP2_Init();
 80008e4:	f7ff fd4e 	bl	8000384 <MX_COMP2_Init>
  MX_DAC1_Init();
 80008e8:	f7ff fda4 	bl	8000434 <MX_DAC1_Init>
  MX_HRTIM1_Init();
 80008ec:	f7ff fe80 	bl	80005f0 <MX_HRTIM1_Init>
  MX_ADC1_Init();
 80008f0:	f7ff fc6a 	bl	80001c8 <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <main+0x20>

080008f6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b096      	sub	sp, #88	; 0x58
 80008fa:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000900:	2228      	movs	r2, #40	; 0x28
 8000902:	2100      	movs	r1, #0
 8000904:	4618      	mov	r0, r3
 8000906:	f004 f9db 	bl	8004cc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800091a:	463b      	mov	r3, r7
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
 8000928:	615a      	str	r2, [r3, #20]
 800092a:	619a      	str	r2, [r3, #24]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800092c:	2302      	movs	r3, #2
 800092e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000930:	2301      	movs	r3, #1
 8000932:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000934:	2310      	movs	r3, #16
 8000936:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000938:	2302      	movs	r3, #2
 800093a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800093c:	2300      	movs	r3, #0
 800093e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000940:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000944:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000946:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800094a:	4618      	mov	r0, r3
 800094c:	f002 ff70 	bl	8003830 <HAL_RCC_OscConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000956:	f000 f829 	bl	80009ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095a:	230f      	movs	r3, #15
 800095c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095e:	2302      	movs	r3, #2
 8000960:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	2102      	movs	r1, #2
 8000976:	4618      	mov	r0, r3
 8000978:	f003 fe62 	bl	8004640 <HAL_RCC_ClockConfig>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000982:	f000 f813 	bl	80009ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 8000986:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800098a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Hrtim1ClockSelection = RCC_HRTIM1CLK_PLLCLK;
 800098c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000990:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000992:	463b      	mov	r3, r7
 8000994:	4618      	mov	r0, r3
 8000996:	f004 f839 	bl	8004a0c <HAL_RCCEx_PeriphCLKConfig>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80009a0:	f000 f804 	bl	80009ac <Error_Handler>
  }
}
 80009a4:	bf00      	nop
 80009a6:	3758      	adds	r7, #88	; 0x58
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
	...

080009bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c2:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <HAL_MspInit+0x44>)
 80009c4:	699b      	ldr	r3, [r3, #24]
 80009c6:	4a0e      	ldr	r2, [pc, #56]	; (8000a00 <HAL_MspInit+0x44>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6193      	str	r3, [r2, #24]
 80009ce:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <HAL_MspInit+0x44>)
 80009d0:	699b      	ldr	r3, [r3, #24]
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <HAL_MspInit+0x44>)
 80009dc:	69db      	ldr	r3, [r3, #28]
 80009de:	4a08      	ldr	r2, [pc, #32]	; (8000a00 <HAL_MspInit+0x44>)
 80009e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e4:	61d3      	str	r3, [r2, #28]
 80009e6:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <HAL_MspInit+0x44>)
 80009e8:	69db      	ldr	r3, [r3, #28]
 80009ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	40021000 	.word	0x40021000

08000a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a16:	e7fe      	b.n	8000a16 <HardFault_Handler+0x4>

08000a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <MemManage_Handler+0x4>

08000a1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a22:	e7fe      	b.n	8000a22 <BusFault_Handler+0x4>

08000a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <UsageFault_Handler+0x4>

08000a2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a58:	f000 f892 	bl	8000b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000a64:	4802      	ldr	r0, [pc, #8]	; (8000a70 <ADC1_2_IRQHandler+0x10>)
 8000a66:	f000 fa5b 	bl	8000f20 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000028 	.word	0x20000028

08000a74 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a78:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <SystemInit+0x28>)
 8000a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a7e:	4a07      	ldr	r2, [pc, #28]	; (8000a9c <SystemInit+0x28>)
 8000a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a88:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <SystemInit+0x28>)
 8000a8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a8e:	609a      	str	r2, [r3, #8]
#endif
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000aa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ad8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000aa4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000aa6:	e003      	b.n	8000ab0 <LoopCopyDataInit>

08000aa8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000aaa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000aac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000aae:	3104      	adds	r1, #4

08000ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ab0:	480b      	ldr	r0, [pc, #44]	; (8000ae0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ab4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000ab6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ab8:	d3f6      	bcc.n	8000aa8 <CopyDataInit>
	ldr	r2, =_sbss
 8000aba:	4a0b      	ldr	r2, [pc, #44]	; (8000ae8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000abc:	e002      	b.n	8000ac4 <LoopFillZerobss>

08000abe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000abe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ac0:	f842 3b04 	str.w	r3, [r2], #4

08000ac4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ac4:	4b09      	ldr	r3, [pc, #36]	; (8000aec <LoopForever+0x16>)
	cmp	r2, r3
 8000ac6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ac8:	d3f9      	bcc.n	8000abe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000aca:	f7ff ffd3 	bl	8000a74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ace:	f004 f8d3 	bl	8004c78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ad2:	f7ff feff 	bl	80008d4 <main>

08000ad6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ad6:	e7fe      	b.n	8000ad6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ad8:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8000adc:	08004d20 	.word	0x08004d20
	ldr	r0, =_sdata
 8000ae0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ae4:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000ae8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000aec:	2000019c 	.word	0x2000019c

08000af0 <CAN_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000af0:	e7fe      	b.n	8000af0 <CAN_RX0_IRQHandler>
	...

08000af4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <HAL_Init+0x28>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a07      	ldr	r2, [pc, #28]	; (8000b1c <HAL_Init+0x28>)
 8000afe:	f043 0310 	orr.w	r3, r3, #16
 8000b02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b04:	2003      	movs	r0, #3
 8000b06:	f001 f997 	bl	8001e38 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	f000 f808 	bl	8000b20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b10:	f7ff ff54 	bl	80009bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40022000 	.word	0x40022000

08000b20 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <HAL_InitTick+0x54>)
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_InitTick+0x58>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	4619      	mov	r1, r3
 8000b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f001 f9af 	bl	8001ea2 <HAL_SYSTICK_Config>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e00e      	b.n	8000b6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2b0f      	cmp	r3, #15
 8000b52:	d80a      	bhi.n	8000b6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b54:	2200      	movs	r2, #0
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5c:	f001 f977 	bl	8001e4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b60:	4a06      	ldr	r2, [pc, #24]	; (8000b7c <HAL_InitTick+0x5c>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b66:	2300      	movs	r3, #0
 8000b68:	e000      	b.n	8000b6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000000 	.word	0x20000000
 8000b78:	20000008 	.word	0x20000008
 8000b7c:	20000004 	.word	0x20000004

08000b80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_IncTick+0x20>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_IncTick+0x24>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4413      	add	r3, r2
 8000b90:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <HAL_IncTick+0x24>)
 8000b92:	6013      	str	r3, [r2, #0]
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	20000008 	.word	0x20000008
 8000ba4:	20000198 	.word	0x20000198

08000ba8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  return uwTick;  
 8000bac:	4b03      	ldr	r3, [pc, #12]	; (8000bbc <HAL_GetTick+0x14>)
 8000bae:	681b      	ldr	r3, [r3, #0]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	20000198 	.word	0x20000198

08000bc0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b09a      	sub	sp, #104	; 0x68
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c04:	2300      	movs	r3, #0
 8000c06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d101      	bne.n	8000c1c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	e172      	b.n	8000f02 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	691b      	ldr	r3, [r3, #16]
 8000c20:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	f003 0310 	and.w	r3, r3, #16
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d176      	bne.n	8000d1c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d152      	bne.n	8000cdc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2200      	movs	r2, #0
 8000c46:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f7ff fb53 	bl	80002fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d13b      	bne.n	8000cdc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f000 ff2b 	bl	8001ac0 <ADC_Disable>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c74:	f003 0310 	and.w	r3, r3, #16
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d12f      	bne.n	8000cdc <HAL_ADC_Init+0xe0>
 8000c7c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d12b      	bne.n	8000cdc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c88:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c8c:	f023 0302 	bic.w	r3, r3, #2
 8000c90:	f043 0202 	orr.w	r2, r3, #2
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	689a      	ldr	r2, [r3, #8]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000ca6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	689a      	ldr	r2, [r3, #8]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000cb6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000cb8:	4b94      	ldr	r3, [pc, #592]	; (8000f0c <HAL_ADC_Init+0x310>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a94      	ldr	r2, [pc, #592]	; (8000f10 <HAL_ADC_Init+0x314>)
 8000cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc2:	0c9a      	lsrs	r2, r3, #18
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	4413      	add	r3, r2
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000cce:	e002      	b.n	8000cd6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d1f9      	bne.n	8000cd0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d007      	beq.n	8000cfa <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000cf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000cf8:	d110      	bne.n	8000d1c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	f023 0312 	bic.w	r3, r3, #18
 8000d02:	f043 0210 	orr.w	r2, r3, #16
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0e:	f043 0201 	orr.w	r2, r3, #1
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d20:	f003 0310 	and.w	r3, r3, #16
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	f040 80df 	bne.w	8000ee8 <HAL_ADC_Init+0x2ec>
 8000d2a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 80da 	bne.w	8000ee8 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 80d2 	bne.w	8000ee8 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d48:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000d4c:	f043 0202 	orr.w	r2, r3, #2
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d54:	4b6f      	ldr	r3, [pc, #444]	; (8000f14 <HAL_ADC_Init+0x318>)
 8000d56:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d60:	d102      	bne.n	8000d68 <HAL_ADC_Init+0x16c>
 8000d62:	4b6d      	ldr	r3, [pc, #436]	; (8000f18 <HAL_ADC_Init+0x31c>)
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	e002      	b.n	8000d6e <HAL_ADC_Init+0x172>
 8000d68:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d6c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	f003 0303 	and.w	r3, r3, #3
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d108      	bne.n	8000d8e <HAL_ADC_Init+0x192>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d101      	bne.n	8000d8e <HAL_ADC_Init+0x192>
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e000      	b.n	8000d90 <HAL_ADC_Init+0x194>
 8000d8e:	2300      	movs	r3, #0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d11c      	bne.n	8000dce <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000d94:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d010      	beq.n	8000dbc <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	f003 0303 	and.w	r3, r3, #3
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d107      	bne.n	8000db6 <HAL_ADC_Init+0x1ba>
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d101      	bne.n	8000db6 <HAL_ADC_Init+0x1ba>
 8000db2:	2301      	movs	r3, #1
 8000db4:	e000      	b.n	8000db8 <HAL_ADC_Init+0x1bc>
 8000db6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d108      	bne.n	8000dce <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000dbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	431a      	orrs	r2, r3
 8000dca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dcc:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	7e5b      	ldrb	r3, [r3, #25]
 8000dd2:	035b      	lsls	r3, r3, #13
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000dd8:	2a01      	cmp	r2, #1
 8000dda:	d002      	beq.n	8000de2 <HAL_ADC_Init+0x1e6>
 8000ddc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000de0:	e000      	b.n	8000de4 <HAL_ADC_Init+0x1e8>
 8000de2:	2200      	movs	r2, #0
 8000de4:	431a      	orrs	r2, r3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	431a      	orrs	r2, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000df4:	4313      	orrs	r3, r2
 8000df6:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d11b      	bne.n	8000e3a <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	7e5b      	ldrb	r3, [r3, #25]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d109      	bne.n	8000e1e <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	045a      	lsls	r2, r3, #17
 8000e12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000e14:	4313      	orrs	r3, r2
 8000e16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e1a:	663b      	str	r3, [r7, #96]	; 0x60
 8000e1c:	e00d      	b.n	8000e3a <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000e26:	f043 0220 	orr.w	r2, r3, #32
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e32:	f043 0201 	orr.w	r2, r3, #1
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d007      	beq.n	8000e52 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	f003 030c 	and.w	r3, r3, #12
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d114      	bne.n	8000e8a <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	68db      	ldr	r3, [r3, #12]
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	6812      	ldr	r2, [r2, #0]
 8000e6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e6e:	f023 0302 	bic.w	r3, r3, #2
 8000e72:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	7e1b      	ldrb	r3, [r3, #24]
 8000e78:	039a      	lsls	r2, r3, #14
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	4313      	orrs	r3, r2
 8000e84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e86:	4313      	orrs	r3, r2
 8000e88:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	68da      	ldr	r2, [r3, #12]
 8000e90:	4b22      	ldr	r3, [pc, #136]	; (8000f1c <HAL_ADC_Init+0x320>)
 8000e92:	4013      	ands	r3, r2
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	6812      	ldr	r2, [r2, #0]
 8000e98:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000e9a:	430b      	orrs	r3, r1
 8000e9c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	691b      	ldr	r3, [r3, #16]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d10c      	bne.n	8000ec0 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eac:	f023 010f 	bic.w	r1, r3, #15
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	69db      	ldr	r3, [r3, #28]
 8000eb4:	1e5a      	subs	r2, r3, #1
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	430a      	orrs	r2, r1
 8000ebc:	631a      	str	r2, [r3, #48]	; 0x30
 8000ebe:	e007      	b.n	8000ed0 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f022 020f 	bic.w	r2, r2, #15
 8000ece:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	f023 0303 	bic.w	r3, r3, #3
 8000ede:	f043 0201 	orr.w	r2, r3, #1
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	641a      	str	r2, [r3, #64]	; 0x40
 8000ee6:	e00a      	b.n	8000efe <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eec:	f023 0312 	bic.w	r3, r3, #18
 8000ef0:	f043 0210 	orr.w	r2, r3, #16
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000ef8:	2301      	movs	r3, #1
 8000efa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000efe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3768      	adds	r7, #104	; 0x68
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	431bde83 	.word	0x431bde83
 8000f14:	50000300 	.word	0x50000300
 8000f18:	50000100 	.word	0x50000100
 8000f1c:	fff0c007 	.word	0xfff0c007

08000f20 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8000f30:	2300      	movs	r3, #0
 8000f32:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f003 0304 	and.w	r3, r3, #4
 8000f3e:	2b04      	cmp	r3, #4
 8000f40:	d106      	bne.n	8000f50 <HAL_ADC_IRQHandler+0x30>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 0304 	and.w	r3, r3, #4
 8000f4c:	2b04      	cmp	r3, #4
 8000f4e:	d00d      	beq.n	8000f6c <HAL_ADC_IRQHandler+0x4c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000f5a:	2b08      	cmp	r3, #8
 8000f5c:	d17a      	bne.n	8001054 <HAL_ADC_IRQHandler+0x134>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 0308 	and.w	r3, r3, #8
 8000f68:	2b08      	cmp	r3, #8
 8000f6a:	d173      	bne.n	8001054 <HAL_ADC_IRQHandler+0x134>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f70:	f003 0310 	and.w	r3, r3, #16
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d105      	bne.n	8000f84 <HAL_ADC_IRQHandler+0x64>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000f84:	4b88      	ldr	r3, [pc, #544]	; (80011a8 <HAL_ADC_IRQHandler+0x288>)
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	f003 031f 	and.w	r3, r3, #31
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d010      	beq.n	8000fb2 <HAL_ADC_IRQHandler+0x92>
 8000f90:	4b85      	ldr	r3, [pc, #532]	; (80011a8 <HAL_ADC_IRQHandler+0x288>)
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	f003 031f 	and.w	r3, r3, #31
 8000f98:	2b05      	cmp	r3, #5
 8000f9a:	d00a      	beq.n	8000fb2 <HAL_ADC_IRQHandler+0x92>
 8000f9c:	4b82      	ldr	r3, [pc, #520]	; (80011a8 <HAL_ADC_IRQHandler+0x288>)
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	f003 031f 	and.w	r3, r3, #31
 8000fa4:	2b09      	cmp	r3, #9
 8000fa6:	d004      	beq.n	8000fb2 <HAL_ADC_IRQHandler+0x92>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fb0:	d104      	bne.n	8000fbc <HAL_ADC_IRQHandler+0x9c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	e003      	b.n	8000fc4 <HAL_ADC_IRQHandler+0xa4>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8000fbc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000fc0:	68db      	ldr	r3, [r3, #12]
 8000fc2:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d139      	bne.n	8001046 <HAL_ADC_IRQHandler+0x126>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d134      	bne.n	8001046 <HAL_ADC_IRQHandler+0x126>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 0308 	and.w	r3, r3, #8
 8000fe6:	2b08      	cmp	r3, #8
 8000fe8:	d12d      	bne.n	8001046 <HAL_ADC_IRQHandler+0x126>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f003 0304 	and.w	r3, r3, #4
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d11a      	bne.n	800102e <HAL_ADC_IRQHandler+0x10e>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	685a      	ldr	r2, [r3, #4]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f022 020c 	bic.w	r2, r2, #12
 8001006:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001018:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d112      	bne.n	8001046 <HAL_ADC_IRQHandler+0x126>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001024:	f043 0201 	orr.w	r2, r3, #1
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	641a      	str	r2, [r3, #64]	; 0x40
 800102c:	e00b      	b.n	8001046 <HAL_ADC_IRQHandler+0x126>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	f043 0210 	orr.w	r2, r3, #16
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103e:	f043 0201 	orr.w	r2, r3, #1
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff fdba 	bl	8000bc0 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	220c      	movs	r2, #12
 8001052:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0320 	and.w	r3, r3, #32
 800105e:	2b20      	cmp	r3, #32
 8001060:	d106      	bne.n	8001070 <HAL_ADC_IRQHandler+0x150>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 0320 	and.w	r3, r3, #32
 800106c:	2b20      	cmp	r3, #32
 800106e:	d00f      	beq.n	8001090 <HAL_ADC_IRQHandler+0x170>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 800107a:	2b40      	cmp	r3, #64	; 0x40
 800107c:	f040 80a9 	bne.w	80011d2 <HAL_ADC_IRQHandler+0x2b2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800108a:	2b40      	cmp	r3, #64	; 0x40
 800108c:	f040 80a1 	bne.w	80011d2 <HAL_ADC_IRQHandler+0x2b2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800109c:	4b42      	ldr	r3, [pc, #264]	; (80011a8 <HAL_ADC_IRQHandler+0x288>)
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	f003 031f 	and.w	r3, r3, #31
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d010      	beq.n	80010ca <HAL_ADC_IRQHandler+0x1aa>
 80010a8:	4b3f      	ldr	r3, [pc, #252]	; (80011a8 <HAL_ADC_IRQHandler+0x288>)
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	f003 031f 	and.w	r3, r3, #31
 80010b0:	2b05      	cmp	r3, #5
 80010b2:	d00a      	beq.n	80010ca <HAL_ADC_IRQHandler+0x1aa>
 80010b4:	4b3c      	ldr	r3, [pc, #240]	; (80011a8 <HAL_ADC_IRQHandler+0x288>)
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	f003 031f 	and.w	r3, r3, #31
 80010bc:	2b09      	cmp	r3, #9
 80010be:	d004      	beq.n	80010ca <HAL_ADC_IRQHandler+0x1aa>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010c8:	d104      	bne.n	80010d4 <HAL_ADC_IRQHandler+0x1b4>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	e003      	b.n	80010dc <HAL_ADC_IRQHandler+0x1bc>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80010d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d010      	beq.n	800110c <HAL_ADC_IRQHandler+0x1ec>
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d167      	bne.n	80011c4 <HAL_ADC_IRQHandler+0x2a4>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d160      	bne.n	80011c4 <HAL_ADC_IRQHandler+0x2a4>
        (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )   )
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001108:	2b00      	cmp	r3, #0
 800110a:	d15b      	bne.n	80011c4 <HAL_ADC_IRQHandler+0x2a4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001116:	2b40      	cmp	r3, #64	; 0x40
 8001118:	d154      	bne.n	80011c4 <HAL_ADC_IRQHandler+0x2a4>
      {
        
        /* Get relevant register CFGR in ADC instance of ADC master or slave  */
        /* in function of multimode state (for devices with multimode         */
        /* available).                                                        */
        if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 800111a:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <HAL_ADC_IRQHandler+0x288>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f003 031f 	and.w	r3, r3, #31
 8001122:	2b00      	cmp	r3, #0
 8001124:	d010      	beq.n	8001148 <HAL_ADC_IRQHandler+0x228>
 8001126:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <HAL_ADC_IRQHandler+0x288>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f003 031f 	and.w	r3, r3, #31
 800112e:	2b06      	cmp	r3, #6
 8001130:	d00a      	beq.n	8001148 <HAL_ADC_IRQHandler+0x228>
 8001132:	4b1d      	ldr	r3, [pc, #116]	; (80011a8 <HAL_ADC_IRQHandler+0x288>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f003 031f 	and.w	r3, r3, #31
 800113a:	2b07      	cmp	r3, #7
 800113c:	d004      	beq.n	8001148 <HAL_ADC_IRQHandler+0x228>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001146:	d104      	bne.n	8001152 <HAL_ADC_IRQHandler+0x232>
        {
          tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	e003      	b.n	800115a <HAL_ADC_IRQHandler+0x23a>
        }
        else
        {
          tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001152:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	60fb      	str	r3, [r7, #12]
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d12f      	bne.n	80011c4 <HAL_ADC_IRQHandler+0x2a4>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f003 0308 	and.w	r3, r3, #8
 800116e:	2b00      	cmp	r3, #0
 8001170:	d11c      	bne.n	80011ac <HAL_ADC_IRQHandler+0x28c>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	685a      	ldr	r2, [r3, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001180:	605a      	str	r2, [r3, #4]
            
            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	641a      	str	r2, [r3, #64]	; 0x40

            if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001196:	2b00      	cmp	r3, #0
 8001198:	d114      	bne.n	80011c4 <HAL_ADC_IRQHandler+0x2a4>
            { 
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	f043 0201 	orr.w	r2, r3, #1
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	641a      	str	r2, [r3, #64]	; 0x40
 80011a6:	e00d      	b.n	80011c4 <HAL_ADC_IRQHandler+0x2a4>
 80011a8:	50000300 	.word	0x50000300
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b0:	f043 0210 	orr.w	r2, r3, #16
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	641a      	str	r2, [r3, #64]	; 0x40
          
            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011bc:	f043 0201 	orr.w	r2, r3, #1
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f000 f8cb 	bl	8001360 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2260      	movs	r2, #96	; 0x60
 80011d0:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011dc:	2b80      	cmp	r3, #128	; 0x80
 80011de:	d113      	bne.n	8001208 <HAL_ADC_IRQHandler+0x2e8>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ea:	2b80      	cmp	r3, #128	; 0x80
 80011ec:	d10c      	bne.n	8001208 <HAL_ADC_IRQHandler+0x2e8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff fcea 	bl	8000bd4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2280      	movs	r2, #128	; 0x80
 8001206:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001216:	d115      	bne.n	8001244 <HAL_ADC_IRQHandler+0x324>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001222:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001226:	d10d      	bne.n	8001244 <HAL_ADC_IRQHandler+0x324>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f000 f8a7 	bl	8001388 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001242:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800124e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001252:	d115      	bne.n	8001280 <HAL_ADC_IRQHandler+0x360>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800125e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001262:	d10d      	bne.n	8001280 <HAL_ADC_IRQHandler+0x360>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001268:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f000 f893 	bl	800139c <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800127e:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0310 	and.w	r3, r3, #16
 800128a:	2b10      	cmp	r3, #16
 800128c:	d13d      	bne.n	800130a <HAL_ADC_IRQHandler+0x3ea>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 0310 	and.w	r3, r3, #16
 8001298:	2b10      	cmp	r3, #16
 800129a:	d136      	bne.n	800130a <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d102      	bne.n	80012aa <HAL_ADC_IRQHandler+0x38a>
    {
      overrun_error = 1U;
 80012a4:	2301      	movs	r3, #1
 80012a6:	617b      	str	r3, [r7, #20]
 80012a8:	e019      	b.n	80012de <HAL_ADC_IRQHandler+0x3be>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012aa:	4b2c      	ldr	r3, [pc, #176]	; (800135c <HAL_ADC_IRQHandler+0x43c>)
 80012ac:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f003 031f 	and.w	r3, r3, #31
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d109      	bne.n	80012ce <HAL_ADC_IRQHandler+0x3ae>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d10a      	bne.n	80012de <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1U;  
 80012c8:	2301      	movs	r3, #1
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	e007      	b.n	80012de <HAL_ADC_IRQHandler+0x3be>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1U;  
 80012da:	2301      	movs	r3, #1
 80012dc:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d10e      	bne.n	8001302 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f4:	f043 0202 	orr.w	r2, r3, #2
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff fc73 	bl	8000be8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2210      	movs	r2, #16
 8001308:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001318:	d11b      	bne.n	8001352 <HAL_ADC_IRQHandler+0x432>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001328:	d113      	bne.n	8001352 <HAL_ADC_IRQHandler+0x432>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	f043 0208 	orr.w	r2, r3, #8
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800134a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f000 f811 	bl	8001374 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8001352:	bf00      	nop
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	50000300 	.word	0x50000300

08001360 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b09b      	sub	sp, #108	; 0x6c
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013ba:	2300      	movs	r3, #0
 80013bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d101      	bne.n	80013d2 <HAL_ADC_ConfigChannel+0x22>
 80013ce:	2302      	movs	r3, #2
 80013d0:	e2a5      	b.n	800191e <HAL_ADC_ConfigChannel+0x56e>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2201      	movs	r2, #1
 80013d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f040 8289 	bne.w	80018fc <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	2b04      	cmp	r3, #4
 80013f0:	d81c      	bhi.n	800142c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685a      	ldr	r2, [r3, #4]
 80013fc:	4613      	mov	r3, r2
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4413      	add	r3, r2
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	461a      	mov	r2, r3
 8001406:	231f      	movs	r3, #31
 8001408:	4093      	lsls	r3, r2
 800140a:	43db      	mvns	r3, r3
 800140c:	4019      	ands	r1, r3
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	6818      	ldr	r0, [r3, #0]
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	4613      	mov	r3, r2
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	4413      	add	r3, r2
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	fa00 f203 	lsl.w	r2, r0, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	430a      	orrs	r2, r1
 8001428:	631a      	str	r2, [r3, #48]	; 0x30
 800142a:	e063      	b.n	80014f4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b09      	cmp	r3, #9
 8001432:	d81e      	bhi.n	8001472 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	4613      	mov	r3, r2
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	4413      	add	r3, r2
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	3b1e      	subs	r3, #30
 8001448:	221f      	movs	r2, #31
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	4019      	ands	r1, r3
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	6818      	ldr	r0, [r3, #0]
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	4613      	mov	r3, r2
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	4413      	add	r3, r2
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	3b1e      	subs	r3, #30
 8001464:	fa00 f203 	lsl.w	r2, r0, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	430a      	orrs	r2, r1
 800146e:	635a      	str	r2, [r3, #52]	; 0x34
 8001470:	e040      	b.n	80014f4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	2b0e      	cmp	r3, #14
 8001478:	d81e      	bhi.n	80014b8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	4613      	mov	r3, r2
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	4413      	add	r3, r2
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	3b3c      	subs	r3, #60	; 0x3c
 800148e:	221f      	movs	r2, #31
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	4019      	ands	r1, r3
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	6818      	ldr	r0, [r3, #0]
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685a      	ldr	r2, [r3, #4]
 80014a0:	4613      	mov	r3, r2
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	4413      	add	r3, r2
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	3b3c      	subs	r3, #60	; 0x3c
 80014aa:	fa00 f203 	lsl.w	r2, r0, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	639a      	str	r2, [r3, #56]	; 0x38
 80014b6:	e01d      	b.n	80014f4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685a      	ldr	r2, [r3, #4]
 80014c2:	4613      	mov	r3, r2
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	4413      	add	r3, r2
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	3b5a      	subs	r3, #90	; 0x5a
 80014cc:	221f      	movs	r2, #31
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	4019      	ands	r1, r3
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	6818      	ldr	r0, [r3, #0]
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	4613      	mov	r3, r2
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	4413      	add	r3, r2
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	3b5a      	subs	r3, #90	; 0x5a
 80014e8:	fa00 f203 	lsl.w	r2, r0, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	430a      	orrs	r2, r1
 80014f2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f003 030c 	and.w	r3, r3, #12
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f040 80e5 	bne.w	80016ce <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b09      	cmp	r3, #9
 800150a:	d91c      	bls.n	8001546 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6999      	ldr	r1, [r3, #24]
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	4613      	mov	r3, r2
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	4413      	add	r3, r2
 800151c:	3b1e      	subs	r3, #30
 800151e:	2207      	movs	r2, #7
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	4019      	ands	r1, r3
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	6898      	ldr	r0, [r3, #8]
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4613      	mov	r3, r2
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	4413      	add	r3, r2
 8001536:	3b1e      	subs	r3, #30
 8001538:	fa00 f203 	lsl.w	r2, r0, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	430a      	orrs	r2, r1
 8001542:	619a      	str	r2, [r3, #24]
 8001544:	e019      	b.n	800157a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6959      	ldr	r1, [r3, #20]
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	4613      	mov	r3, r2
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	4413      	add	r3, r2
 8001556:	2207      	movs	r2, #7
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	4019      	ands	r1, r3
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	6898      	ldr	r0, [r3, #8]
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4613      	mov	r3, r2
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	4413      	add	r3, r2
 800156e:	fa00 f203 	lsl.w	r2, r0, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	430a      	orrs	r2, r1
 8001578:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	695a      	ldr	r2, [r3, #20]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	08db      	lsrs	r3, r3, #3
 8001586:	f003 0303 	and.w	r3, r3, #3
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	3b01      	subs	r3, #1
 8001598:	2b03      	cmp	r3, #3
 800159a:	d84f      	bhi.n	800163c <HAL_ADC_ConfigChannel+0x28c>
 800159c:	a201      	add	r2, pc, #4	; (adr r2, 80015a4 <HAL_ADC_ConfigChannel+0x1f4>)
 800159e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a2:	bf00      	nop
 80015a4:	080015b5 	.word	0x080015b5
 80015a8:	080015d7 	.word	0x080015d7
 80015ac:	080015f9 	.word	0x080015f9
 80015b0:	0800161b 	.word	0x0800161b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015ba:	4b9e      	ldr	r3, [pc, #632]	; (8001834 <HAL_ADC_ConfigChannel+0x484>)
 80015bc:	4013      	ands	r3, r2
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	6812      	ldr	r2, [r2, #0]
 80015c2:	0691      	lsls	r1, r2, #26
 80015c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015c6:	430a      	orrs	r2, r1
 80015c8:	431a      	orrs	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80015d2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80015d4:	e07e      	b.n	80016d4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80015dc:	4b95      	ldr	r3, [pc, #596]	; (8001834 <HAL_ADC_ConfigChannel+0x484>)
 80015de:	4013      	ands	r3, r2
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	6812      	ldr	r2, [r2, #0]
 80015e4:	0691      	lsls	r1, r2, #26
 80015e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015e8:	430a      	orrs	r2, r1
 80015ea:	431a      	orrs	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80015f4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80015f6:	e06d      	b.n	80016d4 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80015fe:	4b8d      	ldr	r3, [pc, #564]	; (8001834 <HAL_ADC_ConfigChannel+0x484>)
 8001600:	4013      	ands	r3, r2
 8001602:	683a      	ldr	r2, [r7, #0]
 8001604:	6812      	ldr	r2, [r2, #0]
 8001606:	0691      	lsls	r1, r2, #26
 8001608:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800160a:	430a      	orrs	r2, r1
 800160c:	431a      	orrs	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001616:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001618:	e05c      	b.n	80016d4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001620:	4b84      	ldr	r3, [pc, #528]	; (8001834 <HAL_ADC_ConfigChannel+0x484>)
 8001622:	4013      	ands	r3, r2
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	6812      	ldr	r2, [r2, #0]
 8001628:	0691      	lsls	r1, r2, #26
 800162a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800162c:	430a      	orrs	r2, r1
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001638:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800163a:	e04b      	b.n	80016d4 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001642:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	069b      	lsls	r3, r3, #26
 800164c:	429a      	cmp	r2, r3
 800164e:	d107      	bne.n	8001660 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800165e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001666:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	069b      	lsls	r3, r3, #26
 8001670:	429a      	cmp	r2, r3
 8001672:	d107      	bne.n	8001684 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001682:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800168a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	069b      	lsls	r3, r3, #26
 8001694:	429a      	cmp	r2, r3
 8001696:	d107      	bne.n	80016a8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80016a6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	069b      	lsls	r3, r3, #26
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d10a      	bne.n	80016d2 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80016ca:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80016cc:	e001      	b.n	80016d2 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80016ce:	bf00      	nop
 80016d0:	e000      	b.n	80016d4 <HAL_ADC_ConfigChannel+0x324>
      break;
 80016d2:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d108      	bne.n	80016f4 <HAL_ADC_ConfigChannel+0x344>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d101      	bne.n	80016f4 <HAL_ADC_ConfigChannel+0x344>
 80016f0:	2301      	movs	r3, #1
 80016f2:	e000      	b.n	80016f6 <HAL_ADC_ConfigChannel+0x346>
 80016f4:	2300      	movs	r3, #0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f040 810b 	bne.w	8001912 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d00f      	beq.n	8001724 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2201      	movs	r2, #1
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43da      	mvns	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	400a      	ands	r2, r1
 800171e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001722:	e049      	b.n	80017b8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2201      	movs	r2, #1
 8001732:	409a      	lsls	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	430a      	orrs	r2, r1
 800173a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b09      	cmp	r3, #9
 8001744:	d91c      	bls.n	8001780 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6999      	ldr	r1, [r3, #24]
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	4613      	mov	r3, r2
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	4413      	add	r3, r2
 8001756:	3b1b      	subs	r3, #27
 8001758:	2207      	movs	r2, #7
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43db      	mvns	r3, r3
 8001760:	4019      	ands	r1, r3
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	6898      	ldr	r0, [r3, #8]
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	4613      	mov	r3, r2
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	4413      	add	r3, r2
 8001770:	3b1b      	subs	r3, #27
 8001772:	fa00 f203 	lsl.w	r2, r0, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	430a      	orrs	r2, r1
 800177c:	619a      	str	r2, [r3, #24]
 800177e:	e01b      	b.n	80017b8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6959      	ldr	r1, [r3, #20]
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	1c5a      	adds	r2, r3, #1
 800178c:	4613      	mov	r3, r2
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	4413      	add	r3, r2
 8001792:	2207      	movs	r2, #7
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	43db      	mvns	r3, r3
 800179a:	4019      	ands	r1, r3
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	6898      	ldr	r0, [r3, #8]
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	1c5a      	adds	r2, r3, #1
 80017a6:	4613      	mov	r3, r2
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	4413      	add	r3, r2
 80017ac:	fa00 f203 	lsl.w	r2, r0, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	430a      	orrs	r2, r1
 80017b6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017b8:	4b1f      	ldr	r3, [pc, #124]	; (8001838 <HAL_ADC_ConfigChannel+0x488>)
 80017ba:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b10      	cmp	r3, #16
 80017c2:	d105      	bne.n	80017d0 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80017c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d015      	beq.n	80017fc <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80017d4:	2b11      	cmp	r3, #17
 80017d6:	d105      	bne.n	80017e4 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80017d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d00b      	beq.n	80017fc <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80017e8:	2b12      	cmp	r3, #18
 80017ea:	f040 8092 	bne.w	8001912 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80017ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f040 808b 	bne.w	8001912 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001804:	d102      	bne.n	800180c <HAL_ADC_ConfigChannel+0x45c>
 8001806:	4b0d      	ldr	r3, [pc, #52]	; (800183c <HAL_ADC_ConfigChannel+0x48c>)
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	e002      	b.n	8001812 <HAL_ADC_ConfigChannel+0x462>
 800180c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001810:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	2b01      	cmp	r3, #1
 800181e:	d10f      	bne.n	8001840 <HAL_ADC_ConfigChannel+0x490>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b01      	cmp	r3, #1
 800182c:	d108      	bne.n	8001840 <HAL_ADC_ConfigChannel+0x490>
 800182e:	2301      	movs	r3, #1
 8001830:	e007      	b.n	8001842 <HAL_ADC_ConfigChannel+0x492>
 8001832:	bf00      	nop
 8001834:	83fff000 	.word	0x83fff000
 8001838:	50000300 	.word	0x50000300
 800183c:	50000100 	.word	0x50000100
 8001840:	2300      	movs	r3, #0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d150      	bne.n	80018e8 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001846:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001848:	2b00      	cmp	r3, #0
 800184a:	d010      	beq.n	800186e <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 0303 	and.w	r3, r3, #3
 8001854:	2b01      	cmp	r3, #1
 8001856:	d107      	bne.n	8001868 <HAL_ADC_ConfigChannel+0x4b8>
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	2b01      	cmp	r3, #1
 8001862:	d101      	bne.n	8001868 <HAL_ADC_ConfigChannel+0x4b8>
 8001864:	2301      	movs	r3, #1
 8001866:	e000      	b.n	800186a <HAL_ADC_ConfigChannel+0x4ba>
 8001868:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800186a:	2b00      	cmp	r3, #0
 800186c:	d13c      	bne.n	80018e8 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2b10      	cmp	r3, #16
 8001874:	d11d      	bne.n	80018b2 <HAL_ADC_ConfigChannel+0x502>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800187e:	d118      	bne.n	80018b2 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001880:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001888:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800188a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800188c:	4b27      	ldr	r3, [pc, #156]	; (800192c <HAL_ADC_ConfigChannel+0x57c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a27      	ldr	r2, [pc, #156]	; (8001930 <HAL_ADC_ConfigChannel+0x580>)
 8001892:	fba2 2303 	umull	r2, r3, r2, r3
 8001896:	0c9a      	lsrs	r2, r3, #18
 8001898:	4613      	mov	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018a2:	e002      	b.n	80018aa <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d1f9      	bne.n	80018a4 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018b0:	e02e      	b.n	8001910 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2b11      	cmp	r3, #17
 80018b8:	d10b      	bne.n	80018d2 <HAL_ADC_ConfigChannel+0x522>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018c2:	d106      	bne.n	80018d2 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80018c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80018cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018ce:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018d0:	e01e      	b.n	8001910 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2b12      	cmp	r3, #18
 80018d8:	d11a      	bne.n	8001910 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80018da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80018e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018e4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018e6:	e013      	b.n	8001910 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ec:	f043 0220 	orr.w	r2, r3, #32
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80018fa:	e00a      	b.n	8001912 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001900:	f043 0220 	orr.w	r2, r3, #32
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800190e:	e000      	b.n	8001912 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001910:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800191a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800191e:	4618      	mov	r0, r3
 8001920:	376c      	adds	r7, #108	; 0x6c
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	20000000 	.word	0x20000000
 8001930:	431bde83 	.word	0x431bde83

08001934 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001934:	b480      	push	{r7}
 8001936:	b099      	sub	sp, #100	; 0x64
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800193e:	2300      	movs	r3, #0
 8001940:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800194c:	d102      	bne.n	8001954 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800194e:	4b5a      	ldr	r3, [pc, #360]	; (8001ab8 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	e002      	b.n	800195a <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001954:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001958:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d101      	bne.n	8001964 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e0a2      	b.n	8001aaa <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800196a:	2b01      	cmp	r3, #1
 800196c:	d101      	bne.n	8001972 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800196e:	2302      	movs	r3, #2
 8001970:	e09b      	b.n	8001aaa <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2201      	movs	r2, #1
 8001976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	2b00      	cmp	r3, #0
 8001986:	d17f      	bne.n	8001a88 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	2b00      	cmp	r3, #0
 8001992:	d179      	bne.n	8001a88 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001994:	4b49      	ldr	r3, [pc, #292]	; (8001abc <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001996:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d040      	beq.n	8001a22 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80019a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	6859      	ldr	r1, [r3, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019b2:	035b      	lsls	r3, r3, #13
 80019b4:	430b      	orrs	r3, r1
 80019b6:	431a      	orrs	r2, r3
 80019b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019ba:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 0303 	and.w	r3, r3, #3
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d108      	bne.n	80019dc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d101      	bne.n	80019dc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80019d8:	2301      	movs	r3, #1
 80019da:	e000      	b.n	80019de <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80019dc:	2300      	movs	r3, #0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d15c      	bne.n	8001a9c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 0303 	and.w	r3, r3, #3
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d107      	bne.n	80019fe <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d101      	bne.n	80019fe <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80019fa:	2301      	movs	r3, #1
 80019fc:	e000      	b.n	8001a00 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80019fe:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d14b      	bne.n	8001a9c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001a04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001a0c:	f023 030f 	bic.w	r3, r3, #15
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	6811      	ldr	r1, [r2, #0]
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	6892      	ldr	r2, [r2, #8]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a1e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a20:	e03c      	b.n	8001a9c <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001a22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a2c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 0303 	and.w	r3, r3, #3
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d108      	bne.n	8001a4e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d101      	bne.n	8001a4e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e000      	b.n	8001a50 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001a4e:	2300      	movs	r3, #0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d123      	bne.n	8001a9c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 0303 	and.w	r3, r3, #3
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d107      	bne.n	8001a70 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d101      	bne.n	8001a70 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e000      	b.n	8001a72 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001a70:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d112      	bne.n	8001a9c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001a76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001a7e:	f023 030f 	bic.w	r3, r3, #15
 8001a82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a84:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a86:	e009      	b.n	8001a9c <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8c:	f043 0220 	orr.w	r2, r3, #32
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001a9a:	e000      	b.n	8001a9e <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a9c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001aa6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3764      	adds	r7, #100	; 0x64
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	50000100 	.word	0x50000100
 8001abc:	50000300 	.word	0x50000300

08001ac0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f003 0303 	and.w	r3, r3, #3
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d108      	bne.n	8001aec <ADC_Disable+0x2c>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d101      	bne.n	8001aec <ADC_Disable+0x2c>
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e000      	b.n	8001aee <ADC_Disable+0x2e>
 8001aec:	2300      	movs	r3, #0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d040      	beq.n	8001b74 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 030d 	and.w	r3, r3, #13
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d10f      	bne.n	8001b20 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	689a      	ldr	r2, [r3, #8]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f042 0202 	orr.w	r2, r2, #2
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2203      	movs	r2, #3
 8001b16:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001b18:	f7ff f846 	bl	8000ba8 <HAL_GetTick>
 8001b1c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b1e:	e022      	b.n	8001b66 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b24:	f043 0210 	orr.w	r2, r3, #16
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b30:	f043 0201 	orr.w	r2, r3, #1
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e01c      	b.n	8001b76 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b3c:	f7ff f834 	bl	8000ba8 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d90d      	bls.n	8001b66 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	f043 0210 	orr.w	r2, r3, #16
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5a:	f043 0201 	orr.w	r2, r3, #1
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e007      	b.n	8001b76 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d0e3      	beq.n	8001b3c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
	...

08001b80 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	75fb      	strb	r3, [r7, #23]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d007      	beq.n	8001ba2 <HAL_COMP_Init+0x22>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	f003 0310 	and.w	r3, r3, #16
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d002      	beq.n	8001ba8 <HAL_COMP_Init+0x28>
  {
    status = HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	75fb      	strb	r3, [r7, #23]
 8001ba6:	e06b      	b.n	8001c80 <HAL_COMP_Init+0x100>
      assert_param(IS_COMP_WINDOWMODE_INSTANCE(hcomp->Instance));
      assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
    }

    /* Init SYSCFG and the low level hardware to access comparators */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba8:	4b38      	ldr	r3, [pc, #224]	; (8001c8c <HAL_COMP_Init+0x10c>)
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	4a37      	ldr	r2, [pc, #220]	; (8001c8c <HAL_COMP_Init+0x10c>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	6193      	str	r3, [r2, #24]
 8001bb4:	4b35      	ldr	r3, [pc, #212]	; (8001c8c <HAL_COMP_Init+0x10c>)
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	693b      	ldr	r3, [r7, #16]
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
    /* Init the low level hardware : SYSCFG to access comparators */
      HAL_COMP_MspInit(hcomp);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7fe fc05 	bl	80003d0 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */

    if (hcomp->State == HAL_COMP_STATE_RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d103      	bne.n	8001bda <HAL_COMP_Init+0x5a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }

    /* Manage inverting input comparator inverting input connected to a GPIO  */
    /* for STM32F302x, STM32F32xx, STM32F33x.                                 */
    hcomp->Init.InvertingInput = COMP_INVERTINGINPUT_SELECTION(hcomp->Instance, hcomp->Init.InvertingInput);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b60      	cmp	r3, #96	; 0x60
 8001be0:	d002      	beq.n	8001be8 <HAL_COMP_Init+0x68>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	e007      	b.n	8001bf8 <HAL_COMP_Init+0x78>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a28      	ldr	r2, [pc, #160]	; (8001c90 <HAL_COMP_Init+0x110>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d101      	bne.n	8001bf6 <HAL_COMP_Init+0x76>
 8001bf2:	2360      	movs	r3, #96	; 0x60
 8001bf4:	e000      	b.n	8001bf8 <HAL_COMP_Init+0x78>
 8001bf6:	4b27      	ldr	r3, [pc, #156]	; (8001c94 <HAL_COMP_Init+0x114>)
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	6053      	str	r3, [r2, #4]
    /*     Set COMPxBLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set COMPxOUTSEL bits according to hcomp->Init.Output value               */
    /*     Set COMPxPOL bit according to hcomp->Init.OutputPol value                */
    /*     Set COMPxHYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set COMPxMODE bits according to hcomp->Init.Mode value                   */
    COMP_INIT(hcomp);
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	6852      	ldr	r2, [r2, #4]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8001c40:	4313      	orrs	r3, r2
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	695a      	ldr	r2, [r3, #20]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	69da      	ldr	r2, [r3, #28]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a1a      	ldr	r2, [r3, #32]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	601a      	str	r2, [r3, #0]

    /* Initialize the COMP state*/
    hcomp->State = HAL_COMP_STATE_READY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  return status;
 8001c80:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	40010020 	.word	0x40010020
 8001c94:	00400070 	.word	0x00400070

08001c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <__NVIC_SetPriorityGrouping+0x44>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cca:	4a04      	ldr	r2, [pc, #16]	; (8001cdc <__NVIC_SetPriorityGrouping+0x44>)
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	60d3      	str	r3, [r2, #12]
}
 8001cd0:	bf00      	nop
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce4:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	0a1b      	lsrs	r3, r3, #8
 8001cea:	f003 0307 	and.w	r3, r3, #7
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	db0b      	blt.n	8001d26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	f003 021f 	and.w	r2, r3, #31
 8001d14:	4907      	ldr	r1, [pc, #28]	; (8001d34 <__NVIC_EnableIRQ+0x38>)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	095b      	lsrs	r3, r3, #5
 8001d1c:	2001      	movs	r0, #1
 8001d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	e000e100 	.word	0xe000e100

08001d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	6039      	str	r1, [r7, #0]
 8001d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	db0a      	blt.n	8001d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	490c      	ldr	r1, [pc, #48]	; (8001d84 <__NVIC_SetPriority+0x4c>)
 8001d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d56:	0112      	lsls	r2, r2, #4
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d60:	e00a      	b.n	8001d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	4908      	ldr	r1, [pc, #32]	; (8001d88 <__NVIC_SetPriority+0x50>)
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	3b04      	subs	r3, #4
 8001d70:	0112      	lsls	r2, r2, #4
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	440b      	add	r3, r1
 8001d76:	761a      	strb	r2, [r3, #24]
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	e000e100 	.word	0xe000e100
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b089      	sub	sp, #36	; 0x24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f1c3 0307 	rsb	r3, r3, #7
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	bf28      	it	cs
 8001daa:	2304      	movcs	r3, #4
 8001dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	3304      	adds	r3, #4
 8001db2:	2b06      	cmp	r3, #6
 8001db4:	d902      	bls.n	8001dbc <NVIC_EncodePriority+0x30>
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3b03      	subs	r3, #3
 8001dba:	e000      	b.n	8001dbe <NVIC_EncodePriority+0x32>
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43da      	mvns	r2, r3
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	401a      	ands	r2, r3
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	fa01 f303 	lsl.w	r3, r1, r3
 8001dde:	43d9      	mvns	r1, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de4:	4313      	orrs	r3, r2
         );
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3724      	adds	r7, #36	; 0x24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
	...

08001df4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e04:	d301      	bcc.n	8001e0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e06:	2301      	movs	r3, #1
 8001e08:	e00f      	b.n	8001e2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e0a:	4a0a      	ldr	r2, [pc, #40]	; (8001e34 <SysTick_Config+0x40>)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e12:	210f      	movs	r1, #15
 8001e14:	f04f 30ff 	mov.w	r0, #4294967295
 8001e18:	f7ff ff8e 	bl	8001d38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <SysTick_Config+0x40>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e22:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <SysTick_Config+0x40>)
 8001e24:	2207      	movs	r2, #7
 8001e26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	e000e010 	.word	0xe000e010

08001e38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7ff ff29 	bl	8001c98 <__NVIC_SetPriorityGrouping>
}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b086      	sub	sp, #24
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	4603      	mov	r3, r0
 8001e56:	60b9      	str	r1, [r7, #8]
 8001e58:	607a      	str	r2, [r7, #4]
 8001e5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e60:	f7ff ff3e 	bl	8001ce0 <__NVIC_GetPriorityGrouping>
 8001e64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	68b9      	ldr	r1, [r7, #8]
 8001e6a:	6978      	ldr	r0, [r7, #20]
 8001e6c:	f7ff ff8e 	bl	8001d8c <NVIC_EncodePriority>
 8001e70:	4602      	mov	r2, r0
 8001e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e76:	4611      	mov	r1, r2
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ff5d 	bl	8001d38 <__NVIC_SetPriority>
}
 8001e7e:	bf00      	nop
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff ff31 	bl	8001cfc <__NVIC_EnableIRQ>
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff ffa2 	bl	8001df4 <SysTick_Config>
 8001eb0:	4603      	mov	r3, r0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b082      	sub	sp, #8
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d101      	bne.n	8001ecc <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e014      	b.n	8001ef6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	791b      	ldrb	r3, [r3, #4]
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d105      	bne.n	8001ee2 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7fe fad3 	bl	8000488 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
	...

08001f00 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b087      	sub	sp, #28
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	2300      	movs	r3, #0
 8001f12:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	795b      	ldrb	r3, [r3, #5]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d101      	bne.n	8001f20 <HAL_DAC_ConfigChannel+0x20>
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	e04e      	b.n	8001fbe <HAL_DAC_ConfigChannel+0xbe>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2201      	movs	r2, #1
 8001f24:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2202      	movs	r2, #2
 8001f2a:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output or switch output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value OR */   
  /* Set OUTEN bit according to DAC_OutputSwitch value */   
#if defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a24      	ldr	r2, [pc, #144]	; (8001fcc <HAL_DAC_ConfigChannel+0xcc>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d112      	bne.n	8001f64 <HAL_DAC_ConfigChannel+0x64>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d10f      	bne.n	8001f64 <HAL_DAC_ConfigChannel+0x64>
  {
    /* Output Buffer (BOFF1) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001f44:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	4013      	ands	r3, r2
 8001f54:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);    
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]
 8001f62:	e00e      	b.n	8001f82 <HAL_DAC_ConfigChannel+0x82>
  }
  else /* DAC1 channel 2U & DAC2 channel 1U */
  {
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
 8001f64:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	4013      	ands	r3, r2
 8001f74:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6819      	ldr	r1, [r3, #0]
 8001f9e:	22c0      	movs	r2, #192	; 0xc0
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43da      	mvns	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	400a      	ands	r2, r1
 8001fae:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	371c      	adds	r7, #28
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	40007400 	.word	0x40007400

08001fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b087      	sub	sp, #28
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fde:	e14e      	b.n	800227e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fec:	4013      	ands	r3, r2
 8001fee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f000 8140 	beq.w	8002278 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d003      	beq.n	8002008 <HAL_GPIO_Init+0x38>
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2b12      	cmp	r3, #18
 8002006:	d123      	bne.n	8002050 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	08da      	lsrs	r2, r3, #3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3208      	adds	r2, #8
 8002010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002014:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	220f      	movs	r2, #15
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	43db      	mvns	r3, r3
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	4013      	ands	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	691a      	ldr	r2, [r3, #16]
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	4313      	orrs	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	08da      	lsrs	r2, r3, #3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	3208      	adds	r2, #8
 800204a:	6939      	ldr	r1, [r7, #16]
 800204c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	2203      	movs	r2, #3
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	4013      	ands	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 0203 	and.w	r2, r3, #3
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	4313      	orrs	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d00b      	beq.n	80020a4 <HAL_GPIO_Init+0xd4>
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b02      	cmp	r3, #2
 8002092:	d007      	beq.n	80020a4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002098:	2b11      	cmp	r3, #17
 800209a:	d003      	beq.n	80020a4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b12      	cmp	r3, #18
 80020a2:	d130      	bne.n	8002106 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	2203      	movs	r2, #3
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	4013      	ands	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	68da      	ldr	r2, [r3, #12]
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020da:	2201      	movs	r2, #1
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	43db      	mvns	r3, r3
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	4013      	ands	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	091b      	lsrs	r3, r3, #4
 80020f0:	f003 0201 	and.w	r2, r3, #1
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	2203      	movs	r2, #3
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43db      	mvns	r3, r3
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	4013      	ands	r3, r2
 800211c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	4313      	orrs	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	f000 809a 	beq.w	8002278 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002144:	4b55      	ldr	r3, [pc, #340]	; (800229c <HAL_GPIO_Init+0x2cc>)
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	4a54      	ldr	r2, [pc, #336]	; (800229c <HAL_GPIO_Init+0x2cc>)
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	6193      	str	r3, [r2, #24]
 8002150:	4b52      	ldr	r3, [pc, #328]	; (800229c <HAL_GPIO_Init+0x2cc>)
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	60bb      	str	r3, [r7, #8]
 800215a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800215c:	4a50      	ldr	r2, [pc, #320]	; (80022a0 <HAL_GPIO_Init+0x2d0>)
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	089b      	lsrs	r3, r3, #2
 8002162:	3302      	adds	r3, #2
 8002164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002168:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	f003 0303 	and.w	r3, r3, #3
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	220f      	movs	r2, #15
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	4013      	ands	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002186:	d013      	beq.n	80021b0 <HAL_GPIO_Init+0x1e0>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a46      	ldr	r2, [pc, #280]	; (80022a4 <HAL_GPIO_Init+0x2d4>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d00d      	beq.n	80021ac <HAL_GPIO_Init+0x1dc>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a45      	ldr	r2, [pc, #276]	; (80022a8 <HAL_GPIO_Init+0x2d8>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d007      	beq.n	80021a8 <HAL_GPIO_Init+0x1d8>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a44      	ldr	r2, [pc, #272]	; (80022ac <HAL_GPIO_Init+0x2dc>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d101      	bne.n	80021a4 <HAL_GPIO_Init+0x1d4>
 80021a0:	2303      	movs	r3, #3
 80021a2:	e006      	b.n	80021b2 <HAL_GPIO_Init+0x1e2>
 80021a4:	2305      	movs	r3, #5
 80021a6:	e004      	b.n	80021b2 <HAL_GPIO_Init+0x1e2>
 80021a8:	2302      	movs	r3, #2
 80021aa:	e002      	b.n	80021b2 <HAL_GPIO_Init+0x1e2>
 80021ac:	2301      	movs	r3, #1
 80021ae:	e000      	b.n	80021b2 <HAL_GPIO_Init+0x1e2>
 80021b0:	2300      	movs	r3, #0
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	f002 0203 	and.w	r2, r2, #3
 80021b8:	0092      	lsls	r2, r2, #2
 80021ba:	4093      	lsls	r3, r2
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	4313      	orrs	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021c2:	4937      	ldr	r1, [pc, #220]	; (80022a0 <HAL_GPIO_Init+0x2d0>)
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	089b      	lsrs	r3, r3, #2
 80021c8:	3302      	adds	r3, #2
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021d0:	4b37      	ldr	r3, [pc, #220]	; (80022b0 <HAL_GPIO_Init+0x2e0>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	43db      	mvns	r3, r3
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	4013      	ands	r3, r2
 80021de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80021f4:	4a2e      	ldr	r2, [pc, #184]	; (80022b0 <HAL_GPIO_Init+0x2e0>)
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021fa:	4b2d      	ldr	r3, [pc, #180]	; (80022b0 <HAL_GPIO_Init+0x2e0>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	43db      	mvns	r3, r3
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	4013      	ands	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	4313      	orrs	r3, r2
 800221c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800221e:	4a24      	ldr	r2, [pc, #144]	; (80022b0 <HAL_GPIO_Init+0x2e0>)
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002224:	4b22      	ldr	r3, [pc, #136]	; (80022b0 <HAL_GPIO_Init+0x2e0>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	43db      	mvns	r3, r3
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	4013      	ands	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	4313      	orrs	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002248:	4a19      	ldr	r2, [pc, #100]	; (80022b0 <HAL_GPIO_Init+0x2e0>)
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800224e:	4b18      	ldr	r3, [pc, #96]	; (80022b0 <HAL_GPIO_Init+0x2e0>)
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	43db      	mvns	r3, r3
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	4013      	ands	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4313      	orrs	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002272:	4a0f      	ldr	r2, [pc, #60]	; (80022b0 <HAL_GPIO_Init+0x2e0>)
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	3301      	adds	r3, #1
 800227c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	fa22 f303 	lsr.w	r3, r2, r3
 8002288:	2b00      	cmp	r3, #0
 800228a:	f47f aea9 	bne.w	8001fe0 <HAL_GPIO_Init+0x10>
  }
}
 800228e:	bf00      	nop
 8002290:	371c      	adds	r7, #28
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	40021000 	.word	0x40021000
 80022a0:	40010000 	.word	0x40010000
 80022a4:	48000400 	.word	0x48000400
 80022a8:	48000800 	.word	0x48000800
 80022ac:	48000c00 	.word	0x48000c00
 80022b0:	40010400 	.word	0x40010400

080022b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	460b      	mov	r3, r1
 80022be:	807b      	strh	r3, [r7, #2]
 80022c0:	4613      	mov	r3, r2
 80022c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022c4:	787b      	ldrb	r3, [r7, #1]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022ca:	887a      	ldrh	r2, [r7, #2]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022d0:	e002      	b.n	80022d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022d2:	887a      	ldrh	r2, [r7, #2]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e0ba      	b.n	800246c <HAL_HRTIM_Init+0x188>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2202      	movs	r2, #2
 80022fa:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d02e      	beq.n	8002398 <HAL_HRTIM_Init+0xb4>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a4d      	ldr	r2, [pc, #308]	; (8002474 <HAL_HRTIM_Init+0x190>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d10b      	bne.n	800235c <HAL_HRTIM_Init+0x78>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8002344:	4b4c      	ldr	r3, [pc, #304]	; (8002478 <HAL_HRTIM_Init+0x194>)
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	4a4b      	ldr	r2, [pc, #300]	; (8002478 <HAL_HRTIM_Init+0x194>)
 800234a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800234e:	6193      	str	r3, [r2, #24]
 8002350:	4b49      	ldr	r3, [pc, #292]	; (8002478 <HAL_HRTIM_Init+0x194>)
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800236a:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	4313      	orrs	r3, r2
 8002378:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002380:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	4313      	orrs	r3, r2
 800238e:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f7fe fa43 	bl	8000824 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d012      	beq.n	80023d0 <HAL_HRTIM_Init+0xec>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023b8:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80023e0:	2300      	movs	r3, #0
 80023e2:	75fb      	strb	r3, [r7, #23]
 80023e4:	e03e      	b.n	8002464 <HAL_HRTIM_Init+0x180>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 80023e6:	7dfa      	ldrb	r2, [r7, #23]
 80023e8:	6879      	ldr	r1, [r7, #4]
 80023ea:	4613      	mov	r3, r2
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	1a9b      	subs	r3, r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	440b      	add	r3, r1
 80023f4:	3318      	adds	r3, #24
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 80023fa:	7dfa      	ldrb	r2, [r7, #23]
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	4613      	mov	r3, r2
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	1a9b      	subs	r3, r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	440b      	add	r3, r1
 8002408:	331c      	adds	r3, #28
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 800240e:	7dfa      	ldrb	r2, [r7, #23]
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	4613      	mov	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	1a9b      	subs	r3, r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	440b      	add	r3, r1
 800241c:	3320      	adds	r3, #32
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8002422:	7dfa      	ldrb	r2, [r7, #23]
 8002424:	6879      	ldr	r1, [r7, #4]
 8002426:	4613      	mov	r3, r2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	1a9b      	subs	r3, r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	440b      	add	r3, r1
 8002430:	3324      	adds	r3, #36	; 0x24
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8002436:	7dfa      	ldrb	r2, [r7, #23]
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	4613      	mov	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	1a9b      	subs	r3, r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	440b      	add	r3, r1
 8002444:	3328      	adds	r3, #40	; 0x28
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 800244a:	7dfa      	ldrb	r2, [r7, #23]
 800244c:	6879      	ldr	r1, [r7, #4]
 800244e:	4613      	mov	r3, r2
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	1a9b      	subs	r3, r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	440b      	add	r3, r1
 8002458:	3330      	adds	r3, #48	; 0x30
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
       timer_idx++)
 800245e:	7dfb      	ldrb	r3, [r7, #23]
 8002460:	3301      	adds	r3, #1
 8002462:	75fb      	strb	r3, [r7, #23]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8002464:	7dfb      	ldrb	r3, [r7, #23]
 8002466:	2b05      	cmp	r3, #5
 8002468:	d9bd      	bls.n	80023e6 <HAL_HRTIM_Init+0x102>
  }

  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3718      	adds	r7, #24
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40017400 	.word	0x40017400
 8002478:	40021000 	.word	0x40021000

0800247c <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t CalibrationRate)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800248c:	2b01      	cmp	r3, #1
 800248e:	d101      	bne.n	8002494 <HAL_HRTIM_DLLCalibrationStart+0x18>
 8002490:	2302      	movs	r3, #2
 8002492:	e041      	b.n	8002518 <HAL_HRTIM_DLLCalibrationStart+0x9c>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2202      	movs	r2, #2
 80024a0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024aa:	d114      	bne.n	80024d6 <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 0202 	bic.w	r2, r2, #2
 80024bc:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f042 0201 	orr.w	r2, r2, #1
 80024d0:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
 80024d4:	e01f      	b.n	8002516 <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 0202 	orr.w	r2, r2, #2
 80024e6:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 80024f2:	f023 010c 	bic.w	r1, r3, #12
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0201 	orr.w	r2, r2, #1
 8002512:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
  }

  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t Timeout)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 800252e:	f7fe fb3b 	bl	8000ba8 <HAL_GetTick>
 8002532:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8002534:	e014      	b.n	8002560 <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253c:	d010      	beq.n	8002560 <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 800253e:	f7fe fb33 	bl	8000ba8 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	429a      	cmp	r2, r3
 800254c:	d302      	bcc.n	8002554 <HAL_HRTIM_PollForDLLCalibration+0x30>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d105      	bne.n	8002560 <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2207      	movs	r2, #7
 8002558:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
        return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e011      	b.n	8002584 <HAL_HRTIM_PollForDLLCalibration+0x60>
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8002568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800256c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002570:	d1e1      	bne.n	8002536 <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d101      	bne.n	80025a8 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 80025a4:	2302      	movs	r3, #2
 80025a6:	e015      	b.n	80025d4 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2202      	movs	r2, #2
 80025ac:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	2b05      	cmp	r3, #5
 80025b4:	d104      	bne.n	80025c0 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f000 fbe4 	bl	8002d86 <HRTIM_MasterBase_Config>
 80025be:	e004      	b.n	80025ca <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	68b9      	ldr	r1, [r7, #8]
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f000 fc0d 	bl	8002de4 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <HAL_HRTIM_EventConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_EventConfig(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t Event,
                                        HRTIM_EventCfgTypeDef* pEventCfg)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_EVENTPOLARITY(pEventCfg->Sensitivity, pEventCfg->Polarity));
  assert_param(IS_HRTIM_EVENTSENSITIVITY(pEventCfg->Sensitivity));
  assert_param(IS_HRTIM_EVENTFASTMODE(Event, pEventCfg->FastMode));
  assert_param(IS_HRTIM_EVENTFILTER(Event, pEventCfg->Filter));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d101      	bne.n	80025f8 <HAL_HRTIM_EventConfig+0x1c>
  {
     return HAL_BUSY;
 80025f4:	2302      	movs	r3, #2
 80025f6:	e01c      	b.n	8002632 <HAL_HRTIM_EventConfig+0x56>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d101      	bne.n	8002606 <HAL_HRTIM_EventConfig+0x2a>
 8002602:	2302      	movs	r3, #2
 8002604:	e015      	b.n	8002632 <HAL_HRTIM_EventConfig+0x56>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2202      	movs	r2, #2
 8002612:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the event channel */
  HRTIM_EventConfig(hhrtim, Event, pEventCfg);
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	68b9      	ldr	r1, [r7, #8]
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f000 fe7e 	bl	800331c <HRTIM_EventConfig>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_HRTIM_EventPrescalerConfig>:
  * @note This function must be called before starting the timer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_EventPrescalerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Prescaler)
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
 8002642:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_EVENTPRESCALER(Prescaler));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d101      	bne.n	8002654 <HAL_HRTIM_EventPrescalerConfig+0x1a>
  {
     return HAL_BUSY;
 8002650:	2302      	movs	r3, #2
 8002652:	e025      	b.n	80026a0 <HAL_HRTIM_EventPrescalerConfig+0x66>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800265a:	2b01      	cmp	r3, #1
 800265c:	d101      	bne.n	8002662 <HAL_HRTIM_EventPrescalerConfig+0x28>
 800265e:	2302      	movs	r3, #2
 8002660:	e01e      	b.n	80026a0 <HAL_HRTIM_EventPrescalerConfig+0x66>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2202      	movs	r2, #2
 800266e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Set the external event prescaler */
  MODIFY_REG(hhrtim->Instance->sCommonRegs.EECR3, HRTIM_EECR3_EEVSD, (Prescaler & HRTIM_EECR3_EEVSD));
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 800267a:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	430a      	orrs	r2, r1
 800268a:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d101      	bne.n	80026c8 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 80026c4:	2302      	movs	r3, #2
 80026c6:	e05f      	b.n	8002788 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d101      	bne.n	80026d6 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 80026d2:	2302      	movs	r3, #2
 80026d4:	e058      	b.n	8002788 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2202      	movs	r2, #2
 80026e2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	2b05      	cmp	r3, #5
 80026ea:	d104      	bne.n	80026f6 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f000 fbb8 	bl	8002e64 <HRTIM_MasterWaveform_Config>
 80026f4:	e004      	b.n	8002700 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	68b9      	ldr	r1, [r7, #8]
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f000 fc18 	bl	8002f30 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6819      	ldr	r1, [r3, #0]
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	4613      	mov	r3, r2
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	1a9b      	subs	r3, r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4403      	add	r3, r0
 8002712:	3320      	adds	r3, #32
 8002714:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6859      	ldr	r1, [r3, #4]
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	68ba      	ldr	r2, [r7, #8]
 800271e:	4613      	mov	r3, r2
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	1a9b      	subs	r3, r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4403      	add	r3, r0
 8002728:	3324      	adds	r3, #36	; 0x24
 800272a:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6899      	ldr	r1, [r3, #8]
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	4613      	mov	r3, r2
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	1a9b      	subs	r3, r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4403      	add	r3, r0
 800273e:	3328      	adds	r3, #40	; 0x28
 8002740:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68d9      	ldr	r1, [r3, #12]
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	68ba      	ldr	r2, [r7, #8]
 800274a:	4613      	mov	r3, r2
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	1a9b      	subs	r3, r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4403      	add	r3, r0
 8002754:	332c      	adds	r3, #44	; 0x2c
 8002756:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6919      	ldr	r1, [r3, #16]
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	4613      	mov	r3, r2
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	1a9b      	subs	r3, r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4403      	add	r3, r0
 800276a:	3330      	adds	r3, #48	; 0x30
 800276c:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 800276e:	68b9      	ldr	r1, [r7, #8]
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f000 fffb 	bl	800376c <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <HAL_HRTIM_TimerEventFilteringConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_TimerEventFilteringConfig(HRTIM_HandleTypeDef * hhrtim,
                                                      uint32_t TimerIdx,
                                                      uint32_t Event,
                                                      HRTIM_TimerEventFilteringCfgTypeDef* pTimerEventFilteringCfg)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
 800279c:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_EVENT(Event));
  assert_param(IS_HRTIM_TIMEVENTFILTER(pTimerEventFilteringCfg->Filter));

  assert_param(IS_HRTIM_TIMEVENTLATCH(pTimerEventFilteringCfg->Latch));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d101      	bne.n	80027ae <HAL_HRTIM_TimerEventFilteringConfig+0x1e>
  {
     return HAL_BUSY;
 80027aa:	2302      	movs	r3, #2
 80027ac:	e145      	b.n	8002a3a <HAL_HRTIM_TimerEventFilteringConfig+0x2aa>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d101      	bne.n	80027bc <HAL_HRTIM_TimerEventFilteringConfig+0x2c>
 80027b8:	2302      	movs	r3, #2
 80027ba:	e13e      	b.n	8002a3a <HAL_HRTIM_TimerEventFilteringConfig+0x2aa>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2202      	movs	r2, #2
 80027c8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure timer event filtering capabilities */
  switch (Event)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b0a      	cmp	r3, #10
 80027d0:	f200 8119 	bhi.w	8002a06 <HAL_HRTIM_TimerEventFilteringConfig+0x276>
 80027d4:	a201      	add	r2, pc, #4	; (adr r2, 80027dc <HAL_HRTIM_TimerEventFilteringConfig+0x4c>)
 80027d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027da:	bf00      	nop
 80027dc:	08002809 	.word	0x08002809
 80027e0:	0800282b 	.word	0x0800282b
 80027e4:	08002859 	.word	0x08002859
 80027e8:	08002889 	.word	0x08002889
 80027ec:	080028b9 	.word	0x080028b9
 80027f0:	080028e9 	.word	0x080028e9
 80027f4:	08002919 	.word	0x08002919
 80027f8:	08002947 	.word	0x08002947
 80027fc:	08002977 	.word	0x08002977
 8002800:	080029a7 	.word	0x080029a7
 8002804:	080029d7 	.word	0x080029d7
  {
  case HRTIM_EVENT_NONE:
    {
      CLEAR_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].EEFxR1);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	01db      	lsls	r3, r3, #7
 8002810:	4413      	add	r3, r2
 8002812:	33cc      	adds	r3, #204	; 0xcc
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
      CLEAR_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].EEFxR2);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	01db      	lsls	r3, r3, #7
 8002820:	4413      	add	r3, r2
 8002822:	33d0      	adds	r3, #208	; 0xd0
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
      break;
 8002828:	e0f6      	b.n	8002a18 <HAL_HRTIM_TimerEventFilteringConfig+0x288>
    }

  case HRTIM_EVENT_1:
    {
      MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].EEFxR1, (HRTIM_EEFR1_EE1FLTR | HRTIM_EEFR1_EE1LTCH), (pTimerEventFilteringCfg->Filter | pTimerEventFilteringCfg->Latch));
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	01db      	lsls	r3, r3, #7
 8002832:	4413      	add	r3, r2
 8002834:	33cc      	adds	r3, #204	; 0xcc
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f023 021f 	bic.w	r2, r3, #31
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	6819      	ldr	r1, [r3, #0]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	430b      	orrs	r3, r1
 8002846:	68f9      	ldr	r1, [r7, #12]
 8002848:	6809      	ldr	r1, [r1, #0]
 800284a:	431a      	orrs	r2, r3
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	01db      	lsls	r3, r3, #7
 8002850:	440b      	add	r3, r1
 8002852:	33cc      	adds	r3, #204	; 0xcc
 8002854:	601a      	str	r2, [r3, #0]
      break;
 8002856:	e0df      	b.n	8002a18 <HAL_HRTIM_TimerEventFilteringConfig+0x288>
    }

  case HRTIM_EVENT_2:
    {
      MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].EEFxR1, (HRTIM_EEFR1_EE2FLTR | HRTIM_EEFR1_EE2LTCH), ((pTimerEventFilteringCfg->Filter | pTimerEventFilteringCfg->Latch) << 6U) );
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	01db      	lsls	r3, r3, #7
 8002860:	4413      	add	r3, r2
 8002862:	33cc      	adds	r3, #204	; 0xcc
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f423 62f8 	bic.w	r2, r3, #1984	; 0x7c0
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	6819      	ldr	r1, [r3, #0]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	430b      	orrs	r3, r1
 8002874:	019b      	lsls	r3, r3, #6
 8002876:	68f9      	ldr	r1, [r7, #12]
 8002878:	6809      	ldr	r1, [r1, #0]
 800287a:	431a      	orrs	r2, r3
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	01db      	lsls	r3, r3, #7
 8002880:	440b      	add	r3, r1
 8002882:	33cc      	adds	r3, #204	; 0xcc
 8002884:	601a      	str	r2, [r3, #0]
      break;
 8002886:	e0c7      	b.n	8002a18 <HAL_HRTIM_TimerEventFilteringConfig+0x288>
    }

  case HRTIM_EVENT_3:
    {
      MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].EEFxR1, (HRTIM_EEFR1_EE3FLTR | HRTIM_EEFR1_EE3LTCH), ((pTimerEventFilteringCfg->Filter | pTimerEventFilteringCfg->Latch) << 12U) );
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	01db      	lsls	r3, r3, #7
 8002890:	4413      	add	r3, r2
 8002892:	33cc      	adds	r3, #204	; 0xcc
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f423 32f8 	bic.w	r2, r3, #126976	; 0x1f000
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	6819      	ldr	r1, [r3, #0]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	430b      	orrs	r3, r1
 80028a4:	031b      	lsls	r3, r3, #12
 80028a6:	68f9      	ldr	r1, [r7, #12]
 80028a8:	6809      	ldr	r1, [r1, #0]
 80028aa:	431a      	orrs	r2, r3
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	01db      	lsls	r3, r3, #7
 80028b0:	440b      	add	r3, r1
 80028b2:	33cc      	adds	r3, #204	; 0xcc
 80028b4:	601a      	str	r2, [r3, #0]
      break;
 80028b6:	e0af      	b.n	8002a18 <HAL_HRTIM_TimerEventFilteringConfig+0x288>
    }

  case HRTIM_EVENT_4:
    {
      MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].EEFxR1, (HRTIM_EEFR1_EE4FLTR | HRTIM_EEFR1_EE4LTCH), ((pTimerEventFilteringCfg->Filter | pTimerEventFilteringCfg->Latch) << 18U) );
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	01db      	lsls	r3, r3, #7
 80028c0:	4413      	add	r3, r2
 80028c2:	33cc      	adds	r3, #204	; 0xcc
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f423 02f8 	bic.w	r2, r3, #8126464	; 0x7c0000
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	6819      	ldr	r1, [r3, #0]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	430b      	orrs	r3, r1
 80028d4:	049b      	lsls	r3, r3, #18
 80028d6:	68f9      	ldr	r1, [r7, #12]
 80028d8:	6809      	ldr	r1, [r1, #0]
 80028da:	431a      	orrs	r2, r3
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	01db      	lsls	r3, r3, #7
 80028e0:	440b      	add	r3, r1
 80028e2:	33cc      	adds	r3, #204	; 0xcc
 80028e4:	601a      	str	r2, [r3, #0]
      break;
 80028e6:	e097      	b.n	8002a18 <HAL_HRTIM_TimerEventFilteringConfig+0x288>
    }

  case HRTIM_EVENT_5:
    {
      MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].EEFxR1, (HRTIM_EEFR1_EE5FLTR | HRTIM_EEFR1_EE5LTCH), ((pTimerEventFilteringCfg->Filter | pTimerEventFilteringCfg->Latch) << 24U) );
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	01db      	lsls	r3, r3, #7
 80028f0:	4413      	add	r3, r2
 80028f2:	33cc      	adds	r3, #204	; 0xcc
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	6819      	ldr	r1, [r3, #0]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	430b      	orrs	r3, r1
 8002904:	061b      	lsls	r3, r3, #24
 8002906:	68f9      	ldr	r1, [r7, #12]
 8002908:	6809      	ldr	r1, [r1, #0]
 800290a:	431a      	orrs	r2, r3
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	01db      	lsls	r3, r3, #7
 8002910:	440b      	add	r3, r1
 8002912:	33cc      	adds	r3, #204	; 0xcc
 8002914:	601a      	str	r2, [r3, #0]
      break;
 8002916:	e07f      	b.n	8002a18 <HAL_HRTIM_TimerEventFilteringConfig+0x288>
    }

  case HRTIM_EVENT_6:
    {
      MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].EEFxR2, (HRTIM_EEFR2_EE6FLTR | HRTIM_EEFR2_EE6LTCH), (pTimerEventFilteringCfg->Filter | pTimerEventFilteringCfg->Latch) );
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	01db      	lsls	r3, r3, #7
 8002920:	4413      	add	r3, r2
 8002922:	33d0      	adds	r3, #208	; 0xd0
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f023 021f 	bic.w	r2, r3, #31
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	6819      	ldr	r1, [r3, #0]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	430b      	orrs	r3, r1
 8002934:	68f9      	ldr	r1, [r7, #12]
 8002936:	6809      	ldr	r1, [r1, #0]
 8002938:	431a      	orrs	r2, r3
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	01db      	lsls	r3, r3, #7
 800293e:	440b      	add	r3, r1
 8002940:	33d0      	adds	r3, #208	; 0xd0
 8002942:	601a      	str	r2, [r3, #0]
      break;
 8002944:	e068      	b.n	8002a18 <HAL_HRTIM_TimerEventFilteringConfig+0x288>
    }

  case HRTIM_EVENT_7:
    {
      MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].EEFxR2, (HRTIM_EEFR2_EE7FLTR | HRTIM_EEFR2_EE7LTCH), ((pTimerEventFilteringCfg->Filter | pTimerEventFilteringCfg->Latch) << 6U) );
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	01db      	lsls	r3, r3, #7
 800294e:	4413      	add	r3, r2
 8002950:	33d0      	adds	r3, #208	; 0xd0
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f423 62f8 	bic.w	r2, r3, #1984	; 0x7c0
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	6819      	ldr	r1, [r3, #0]
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	430b      	orrs	r3, r1
 8002962:	019b      	lsls	r3, r3, #6
 8002964:	68f9      	ldr	r1, [r7, #12]
 8002966:	6809      	ldr	r1, [r1, #0]
 8002968:	431a      	orrs	r2, r3
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	01db      	lsls	r3, r3, #7
 800296e:	440b      	add	r3, r1
 8002970:	33d0      	adds	r3, #208	; 0xd0
 8002972:	601a      	str	r2, [r3, #0]
      break;
 8002974:	e050      	b.n	8002a18 <HAL_HRTIM_TimerEventFilteringConfig+0x288>
    }

  case HRTIM_EVENT_8:
    {
      MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].EEFxR2, (HRTIM_EEFR2_EE8FLTR | HRTIM_EEFR2_EE8LTCH), ((pTimerEventFilteringCfg->Filter | pTimerEventFilteringCfg->Latch) << 12U) );
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	01db      	lsls	r3, r3, #7
 800297e:	4413      	add	r3, r2
 8002980:	33d0      	adds	r3, #208	; 0xd0
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f423 32f8 	bic.w	r2, r3, #126976	; 0x1f000
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	6819      	ldr	r1, [r3, #0]
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	430b      	orrs	r3, r1
 8002992:	031b      	lsls	r3, r3, #12
 8002994:	68f9      	ldr	r1, [r7, #12]
 8002996:	6809      	ldr	r1, [r1, #0]
 8002998:	431a      	orrs	r2, r3
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	01db      	lsls	r3, r3, #7
 800299e:	440b      	add	r3, r1
 80029a0:	33d0      	adds	r3, #208	; 0xd0
 80029a2:	601a      	str	r2, [r3, #0]
      break;
 80029a4:	e038      	b.n	8002a18 <HAL_HRTIM_TimerEventFilteringConfig+0x288>
    }

  case HRTIM_EVENT_9:
    {
      MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].EEFxR2, (HRTIM_EEFR2_EE9FLTR | HRTIM_EEFR2_EE9LTCH), ((pTimerEventFilteringCfg->Filter | pTimerEventFilteringCfg->Latch) << 18U) );
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	01db      	lsls	r3, r3, #7
 80029ae:	4413      	add	r3, r2
 80029b0:	33d0      	adds	r3, #208	; 0xd0
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f423 02f8 	bic.w	r2, r3, #8126464	; 0x7c0000
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	6819      	ldr	r1, [r3, #0]
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	430b      	orrs	r3, r1
 80029c2:	049b      	lsls	r3, r3, #18
 80029c4:	68f9      	ldr	r1, [r7, #12]
 80029c6:	6809      	ldr	r1, [r1, #0]
 80029c8:	431a      	orrs	r2, r3
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	01db      	lsls	r3, r3, #7
 80029ce:	440b      	add	r3, r1
 80029d0:	33d0      	adds	r3, #208	; 0xd0
 80029d2:	601a      	str	r2, [r3, #0]
      break;
 80029d4:	e020      	b.n	8002a18 <HAL_HRTIM_TimerEventFilteringConfig+0x288>
    }

  case HRTIM_EVENT_10:
    {
      MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].EEFxR2, (HRTIM_EEFR2_EE10FLTR | HRTIM_EEFR2_EE10LTCH), ((pTimerEventFilteringCfg->Filter | pTimerEventFilteringCfg->Latch) << 24U) );
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	01db      	lsls	r3, r3, #7
 80029de:	4413      	add	r3, r2
 80029e0:	33d0      	adds	r3, #208	; 0xd0
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	6819      	ldr	r1, [r3, #0]
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	430b      	orrs	r3, r1
 80029f2:	061b      	lsls	r3, r3, #24
 80029f4:	68f9      	ldr	r1, [r7, #12]
 80029f6:	6809      	ldr	r1, [r1, #0]
 80029f8:	431a      	orrs	r2, r3
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	01db      	lsls	r3, r3, #7
 80029fe:	440b      	add	r3, r1
 8002a00:	33d0      	adds	r3, #208	; 0xd0
 8002a02:	601a      	str	r2, [r3, #0]
      break;
 8002a04:	e008      	b.n	8002a18 <HAL_HRTIM_TimerEventFilteringConfig+0x288>
    }

  default:
   {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2207      	movs	r2, #7
 8002a0a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 8002a16:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b07      	cmp	r3, #7
 8002a22:	d101      	bne.n	8002a28 <HAL_HRTIM_TimerEventFilteringConfig+0x298>
  {
     return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e008      	b.n	8002a3a <HAL_HRTIM_TimerEventFilteringConfig+0x2aa>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop

08002a48 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
 8002a54:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d101      	bne.n	8002a66 <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 8002a62:	2302      	movs	r3, #2
 8002a64:	e157      	b.n	8002d16 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d101      	bne.n	8002a74 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8002a70:	2302      	movs	r3, #2
 8002a72:	e150      	b.n	8002d16 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2202      	movs	r2, #2
 8002a80:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2b05      	cmp	r3, #5
 8002a88:	d140      	bne.n	8002b0c <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	2b07      	cmp	r3, #7
 8002a90:	d82a      	bhi.n	8002ae8 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8002a92:	a201      	add	r2, pc, #4	; (adr r2, 8002a98 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8002a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a98:	08002ab9 	.word	0x08002ab9
 8002a9c:	08002ac5 	.word	0x08002ac5
 8002aa0:	08002ae9 	.word	0x08002ae9
 8002aa4:	08002ad1 	.word	0x08002ad1
 8002aa8:	08002ae9 	.word	0x08002ae9
 8002aac:	08002ae9 	.word	0x08002ae9
 8002ab0:	08002ae9 	.word	0x08002ae9
 8002ab4:	08002add 	.word	0x08002add
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	6812      	ldr	r2, [r2, #0]
 8002ac0:	61da      	str	r2, [r3, #28]
        break;
 8002ac2:	e01a      	b.n	8002afa <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	6812      	ldr	r2, [r2, #0]
 8002acc:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 8002ace:	e014      	b.n	8002afa <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	6812      	ldr	r2, [r2, #0]
 8002ad8:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 8002ada:	e00e      	b.n	8002afa <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	6812      	ldr	r2, [r2, #0]
 8002ae4:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8002ae6:	e008      	b.n	8002afa <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2207      	movs	r2, #7
 8002aec:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

        break;
 8002af8:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b07      	cmp	r3, #7
 8002b04:	f040 80fe 	bne.w	8002d04 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e104      	b.n	8002d16 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	2b07      	cmp	r3, #7
 8002b12:	f200 80e3 	bhi.w	8002cdc <HAL_HRTIM_WaveformCompareConfig+0x294>
 8002b16:	a201      	add	r2, pc, #4	; (adr r2, 8002b1c <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8002b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b1c:	08002b3d 	.word	0x08002b3d
 8002b20:	08002b51 	.word	0x08002b51
 8002b24:	08002cdd 	.word	0x08002cdd
 8002b28:	08002c0d 	.word	0x08002c0d
 8002b2c:	08002cdd 	.word	0x08002cdd
 8002b30:	08002cdd 	.word	0x08002cdd
 8002b34:	08002cdd 	.word	0x08002cdd
 8002b38:	08002c21 	.word	0x08002c21
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6819      	ldr	r1, [r3, #0]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	01db      	lsls	r3, r3, #7
 8002b48:	440b      	add	r3, r1
 8002b4a:	339c      	adds	r3, #156	; 0x9c
 8002b4c:	601a      	str	r2, [r3, #0]
        break;
 8002b4e:	e0d1      	b.n	8002cf4 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6819      	ldr	r1, [r3, #0]
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	01db      	lsls	r3, r3, #7
 8002b5c:	440b      	add	r3, r1
 8002b5e:	33a4      	adds	r3, #164	; 0xa4
 8002b60:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d03f      	beq.n	8002bea <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	3301      	adds	r3, #1
 8002b72:	01db      	lsls	r3, r3, #7
 8002b74:	4413      	add	r3, r2
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	6811      	ldr	r1, [r2, #0]
 8002b7c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	3301      	adds	r3, #1
 8002b84:	01db      	lsls	r3, r3, #7
 8002b86:	440b      	add	r3, r1
 8002b88:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	3301      	adds	r3, #1
 8002b92:	01db      	lsls	r3, r3, #7
 8002b94:	4413      	add	r3, r2
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	68f9      	ldr	r1, [r7, #12]
 8002b9e:	6809      	ldr	r1, [r1, #0]
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	01db      	lsls	r3, r3, #7
 8002ba8:	440b      	add	r3, r1
 8002baa:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bb4:	d109      	bne.n	8002bca <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6819      	ldr	r1, [r3, #0]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	689a      	ldr	r2, [r3, #8]
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	01db      	lsls	r3, r3, #7
 8002bc2:	440b      	add	r3, r1
 8002bc4:	339c      	adds	r3, #156	; 0x9c
 8002bc6:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8002bc8:	e091      	b.n	8002cee <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002bd2:	f040 808c 	bne.w	8002cee <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6819      	ldr	r1, [r3, #0]
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	689a      	ldr	r2, [r3, #8]
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	01db      	lsls	r3, r3, #7
 8002be2:	440b      	add	r3, r1
 8002be4:	33a8      	adds	r3, #168	; 0xa8
 8002be6:	601a      	str	r2, [r3, #0]
         break;
 8002be8:	e081      	b.n	8002cee <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	01db      	lsls	r3, r3, #7
 8002bf4:	4413      	add	r3, r2
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	6811      	ldr	r1, [r2, #0]
 8002bfc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	3301      	adds	r3, #1
 8002c04:	01db      	lsls	r3, r3, #7
 8002c06:	440b      	add	r3, r1
 8002c08:	601a      	str	r2, [r3, #0]
         break;
 8002c0a:	e070      	b.n	8002cee <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6819      	ldr	r1, [r3, #0]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	01db      	lsls	r3, r3, #7
 8002c18:	440b      	add	r3, r1
 8002c1a:	33a8      	adds	r3, #168	; 0xa8
 8002c1c:	601a      	str	r2, [r3, #0]
        break;
 8002c1e:	e069      	b.n	8002cf4 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6819      	ldr	r1, [r3, #0]
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	01db      	lsls	r3, r3, #7
 8002c2c:	440b      	add	r3, r1
 8002c2e:	33ac      	adds	r3, #172	; 0xac
 8002c30:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d03f      	beq.n	8002cba <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	3301      	adds	r3, #1
 8002c42:	01db      	lsls	r3, r3, #7
 8002c44:	4413      	add	r3, r2
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	6811      	ldr	r1, [r2, #0]
 8002c4c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	3301      	adds	r3, #1
 8002c54:	01db      	lsls	r3, r3, #7
 8002c56:	440b      	add	r3, r1
 8002c58:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	3301      	adds	r3, #1
 8002c62:	01db      	lsls	r3, r3, #7
 8002c64:	4413      	add	r3, r2
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	68f9      	ldr	r1, [r7, #12]
 8002c70:	6809      	ldr	r1, [r1, #0]
 8002c72:	431a      	orrs	r2, r3
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	3301      	adds	r3, #1
 8002c78:	01db      	lsls	r3, r3, #7
 8002c7a:	440b      	add	r3, r1
 8002c7c:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c86:	d109      	bne.n	8002c9c <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6819      	ldr	r1, [r3, #0]
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	01db      	lsls	r3, r3, #7
 8002c94:	440b      	add	r3, r1
 8002c96:	339c      	adds	r3, #156	; 0x9c
 8002c98:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 8002c9a:	e02a      	b.n	8002cf2 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002ca4:	d125      	bne.n	8002cf2 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6819      	ldr	r1, [r3, #0]
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	689a      	ldr	r2, [r3, #8]
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	01db      	lsls	r3, r3, #7
 8002cb2:	440b      	add	r3, r1
 8002cb4:	33a8      	adds	r3, #168	; 0xa8
 8002cb6:	601a      	str	r2, [r3, #0]
         break;
 8002cb8:	e01b      	b.n	8002cf2 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	01db      	lsls	r3, r3, #7
 8002cc4:	4413      	add	r3, r2
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	6811      	ldr	r1, [r2, #0]
 8002ccc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	01db      	lsls	r3, r3, #7
 8002cd6:	440b      	add	r3, r1
 8002cd8:	601a      	str	r2, [r3, #0]
         break;
 8002cda:	e00a      	b.n	8002cf2 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2207      	movs	r2, #7
 8002ce0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 8002cec:	e002      	b.n	8002cf4 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8002cee:	bf00      	nop
 8002cf0:	e000      	b.n	8002cf4 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8002cf2:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	2b07      	cmp	r3, #7
 8002cfe:	d101      	bne.n	8002d04 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e008      	b.n	8002d16 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop

08002d24 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
 8002d30:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d101      	bne.n	8002d42 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e01d      	b.n	8002d7e <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d101      	bne.n	8002d50 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	e016      	b.n	8002d7e <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	68b9      	ldr	r1, [r7, #8]
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 fa22 	bl	80031b0 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                     HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b085      	sub	sp, #20
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
 8002d8e:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f023 0307 	bic.w	r3, r3, #7
 8002d9e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f023 0318 	bic.w	r3, r3, #24
 8002db0:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	6812      	ldr	r2, [r2, #0]
 8002dcc:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	6852      	ldr	r2, [r2, #4]
 8002dd6:	619a      	str	r2, [r3, #24]
}
 8002dd8:	bf00      	nop
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                         uint32_t TimerIdx ,
                                         HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b087      	sub	sp, #28
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	3301      	adds	r3, #1
 8002df8:	01db      	lsls	r3, r3, #7
 8002dfa:	4413      	add	r3, r2
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	f023 0307 	bic.w	r3, r3, #7
 8002e06:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	f023 0318 	bic.w	r3, r3, #24
 8002e18:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	01db      	lsls	r3, r3, #7
 8002e2e:	4413      	add	r3, r2
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6819      	ldr	r1, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	01db      	lsls	r3, r3, #7
 8002e40:	440b      	add	r3, r1
 8002e42:	3394      	adds	r3, #148	; 0x94
 8002e44:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6819      	ldr	r1, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	01db      	lsls	r3, r3, #7
 8002e52:	440b      	add	r3, r1
 8002e54:	3398      	adds	r3, #152	; 0x98
 8002e56:	601a      	str	r2, [r3, #0]
}
 8002e58:	bf00      	nop
 8002e5a:	371c      	adds	r7, #28
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                         HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8002e7e:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f023 0320 	bic.w	r3, r3, #32
 8002e86:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e98:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002eaa:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ebc:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload meachanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8002ece:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002ee0:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002ef4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f06:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8002f24:	bf00      	nop
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b08b      	sub	sp, #44	; 0x2c
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	3301      	adds	r3, #1
 8002f44:	01db      	lsls	r3, r3, #7
 8002f46:	4413      	add	r3, r2
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	6811      	ldr	r1, [r2, #0]
 8002f4e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	3301      	adds	r3, #1
 8002f56:	01db      	lsls	r3, r3, #7
 8002f58:	440b      	add	r3, r1
 8002f5a:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	3301      	adds	r3, #1
 8002f64:	01db      	lsls	r3, r3, #7
 8002f66:	4413      	add	r3, r2
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	01db      	lsls	r3, r3, #7
 8002f74:	4413      	add	r3, r2
 8002f76:	33e8      	adds	r3, #232	; 0xe8
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	01db      	lsls	r3, r3, #7
 8002f84:	4413      	add	r3, r2
 8002f86:	33e4      	adds	r3, #228	; 0xe4
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8002f94:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	f023 0320 	bic.w	r3, r3, #32
 8002f9c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002fd2:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload meachanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8002fe4:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fec:	4313      	orrs	r3, r2
 8002fee:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ffe:	4313      	orrs	r3, r2
 8003000:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8003002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003004:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003008:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003012:	d103      	bne.n	800301c <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800301a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 800301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003022:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800302a:	4313      	orrs	r3, r2
 800302c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003034:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800303a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800303c:	4313      	orrs	r3, r2
 800303e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8003040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003042:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8003046:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800304c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800304e:	4313      	orrs	r3, r2
 8003050:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	f023 031f 	bic.w	r3, r3, #31
 8003058:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305e:	f003 031f 	and.w	r3, r3, #31
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	4313      	orrs	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800306e:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	4313      	orrs	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800307e:	2b00      	cmp	r3, #0
 8003080:	d108      	bne.n	8003094 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003088:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	6a3a      	ldr	r2, [r7, #32]
 8003090:	4313      	orrs	r3, r2
 8003092:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003098:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 800309c:	d004      	beq.n	80030a8 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a2:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 80030a6:	d103      	bne.n	80030b0 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ac:	2b40      	cmp	r3, #64	; 0x40
 80030ae:	d108      	bne.n	80030c2 <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 80030b0:	6a3b      	ldr	r3, [r7, #32]
 80030b2:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 80030b6:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030bc:	6a3a      	ldr	r2, [r7, #32]
 80030be:	4313      	orrs	r3, r2
 80030c0:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c6:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d843      	bhi.n	8003156 <HRTIM_TimingUnitWaveform_Config+0x226>
 80030ce:	a201      	add	r2, pc, #4	; (adr r2, 80030d4 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 80030d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d4:	080030e9 	.word	0x080030e9
 80030d8:	080030ff 	.word	0x080030ff
 80030dc:	08003115 	.word	0x08003115
 80030e0:	0800312b 	.word	0x0800312b
 80030e4:	08003141 	.word	0x08003141
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80030ee:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	69fa      	ldr	r2, [r7, #28]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	61fb      	str	r3, [r7, #28]
      break;
 80030fc:	e02c      	b.n	8003158 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003104:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	69fa      	ldr	r2, [r7, #28]
 800310e:	4313      	orrs	r3, r2
 8003110:	61fb      	str	r3, [r7, #28]
      break;
 8003112:	e021      	b.n	8003158 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800311a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	69fa      	ldr	r2, [r7, #28]
 8003124:	4313      	orrs	r3, r2
 8003126:	61fb      	str	r3, [r7, #28]
      break;
 8003128:	e016      	b.n	8003158 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003130:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	69fa      	ldr	r2, [r7, #28]
 800313a:	4313      	orrs	r3, r2
 800313c:	61fb      	str	r3, [r7, #28]
      break;
 800313e:	e00b      	b.n	8003158 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003146:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	015b      	lsls	r3, r3, #5
 800314e:	69fa      	ldr	r2, [r7, #28]
 8003150:	4313      	orrs	r3, r2
 8003152:	61fb      	str	r3, [r7, #28]
      break;
 8003154:	e000      	b.n	8003158 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 8003156:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	3301      	adds	r3, #1
 8003160:	01db      	lsls	r3, r3, #7
 8003162:	4413      	add	r3, r2
 8003164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003166:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	01db      	lsls	r3, r3, #7
 8003170:	4413      	add	r3, r2
 8003172:	33e8      	adds	r3, #232	; 0xe8
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	01db      	lsls	r3, r3, #7
 8003180:	4413      	add	r3, r2
 8003182:	33e4      	adds	r3, #228	; 0xe4
 8003184:	6a3a      	ldr	r2, [r7, #32]
 8003186:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	01db      	lsls	r3, r3, #7
 8003190:	4413      	add	r3, r2
 8003192:	33d4      	adds	r3, #212	; 0xd4
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	69fa      	ldr	r2, [r7, #28]
 800319e:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 80031a2:	bf00      	nop
 80031a4:	372c      	adds	r7, #44	; 0x2c
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop

080031b0 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b089      	sub	sp, #36	; 0x24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
 80031bc:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 80031be:	2300      	movs	r3, #0
 80031c0:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	01db      	lsls	r3, r3, #7
 80031ca:	4413      	add	r3, r2
 80031cc:	33e4      	adds	r3, #228	; 0xe4
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	01db      	lsls	r3, r3, #7
 80031da:	4413      	add	r3, r2
 80031dc:	33b8      	adds	r3, #184	; 0xb8
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	617b      	str	r3, [r7, #20]

  switch (Output)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2b10      	cmp	r3, #16
 80031e6:	d01d      	beq.n	8003224 <HRTIM_OutputConfig+0x74>
 80031e8:	2b10      	cmp	r3, #16
 80031ea:	d80b      	bhi.n	8003204 <HRTIM_OutputConfig+0x54>
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d02c      	beq.n	800324a <HRTIM_OutputConfig+0x9a>
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d802      	bhi.n	80031fa <HRTIM_OutputConfig+0x4a>
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d015      	beq.n	8003224 <HRTIM_OutputConfig+0x74>
      shift = 16U;
      break;
    }

  default:
    break;
 80031f8:	e03c      	b.n	8003274 <HRTIM_OutputConfig+0xc4>
  switch (Output)
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	d012      	beq.n	8003224 <HRTIM_OutputConfig+0x74>
 80031fe:	2b08      	cmp	r3, #8
 8003200:	d023      	beq.n	800324a <HRTIM_OutputConfig+0x9a>
    break;
 8003202:	e037      	b.n	8003274 <HRTIM_OutputConfig+0xc4>
  switch (Output)
 8003204:	2b80      	cmp	r3, #128	; 0x80
 8003206:	d020      	beq.n	800324a <HRTIM_OutputConfig+0x9a>
 8003208:	2b80      	cmp	r3, #128	; 0x80
 800320a:	d804      	bhi.n	8003216 <HRTIM_OutputConfig+0x66>
 800320c:	2b20      	cmp	r3, #32
 800320e:	d01c      	beq.n	800324a <HRTIM_OutputConfig+0x9a>
 8003210:	2b40      	cmp	r3, #64	; 0x40
 8003212:	d007      	beq.n	8003224 <HRTIM_OutputConfig+0x74>
    break;
 8003214:	e02e      	b.n	8003274 <HRTIM_OutputConfig+0xc4>
  switch (Output)
 8003216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800321a:	d003      	beq.n	8003224 <HRTIM_OutputConfig+0x74>
 800321c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003220:	d013      	beq.n	800324a <HRTIM_OutputConfig+0x9a>
    break;
 8003222:	e027      	b.n	8003274 <HRTIM_OutputConfig+0xc4>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6819      	ldr	r1, [r3, #0]
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	01db      	lsls	r3, r3, #7
 8003230:	440b      	add	r3, r1
 8003232:	33bc      	adds	r3, #188	; 0xbc
 8003234:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6819      	ldr	r1, [r3, #0]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	689a      	ldr	r2, [r3, #8]
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	01db      	lsls	r3, r3, #7
 8003242:	440b      	add	r3, r1
 8003244:	33c0      	adds	r3, #192	; 0xc0
 8003246:	601a      	str	r2, [r3, #0]
      break;
 8003248:	e014      	b.n	8003274 <HRTIM_OutputConfig+0xc4>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6819      	ldr	r1, [r3, #0]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	01db      	lsls	r3, r3, #7
 8003256:	440b      	add	r3, r1
 8003258:	33c4      	adds	r3, #196	; 0xc4
 800325a:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6819      	ldr	r1, [r3, #0]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	01db      	lsls	r3, r3, #7
 8003268:	440b      	add	r3, r1
 800326a:	33c8      	adds	r3, #200	; 0xc8
 800326c:	601a      	str	r2, [r3, #0]
      shift = 16U;
 800326e:	2310      	movs	r3, #16
 8003270:	61bb      	str	r3, [r7, #24]
      break;
 8003272:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8003274:	22fe      	movs	r2, #254	; 0xfe
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 800327c:	43db      	mvns	r3, r3
 800327e:	69fa      	ldr	r2, [r7, #28]
 8003280:	4013      	ands	r3, r2
 8003282:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	fa02 f303 	lsl.w	r3, r2, r3
 800328e:	69fa      	ldr	r2, [r7, #28]
 8003290:	4313      	orrs	r3, r2
 8003292:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	68da      	ldr	r2, [r3, #12]
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	69fa      	ldr	r2, [r7, #28]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	691a      	ldr	r2, [r3, #16]
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	fa02 f303 	lsl.w	r3, r2, r3
 80032ae:	69fa      	ldr	r2, [r7, #28]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	695a      	ldr	r2, [r3, #20]
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	69fa      	ldr	r2, [r7, #28]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	699a      	ldr	r2, [r3, #24]
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	69fa      	ldr	r2, [r7, #28]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	2b08      	cmp	r3, #8
 80032da:	d111      	bne.n	8003300 <HRTIM_OutputConfig+0x150>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10c      	bne.n	8003300 <HRTIM_OutputConfig+0x150>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d107      	bne.n	8003300 <HRTIM_OutputConfig+0x150>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	69da      	ldr	r2, [r3, #28]
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	69fa      	ldr	r2, [r7, #28]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	01db      	lsls	r3, r3, #7
 8003308:	4413      	add	r3, r2
 800330a:	33e4      	adds	r3, #228	; 0xe4
 800330c:	69fa      	ldr	r2, [r7, #28]
 800330e:	601a      	str	r2, [r3, #0]
}
 8003310:	bf00      	nop
 8003312:	3724      	adds	r7, #36	; 0x24
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <HRTIM_EventConfig>:
  * @retval None
  */
static void HRTIM_EventConfig(HRTIM_HandleTypeDef * hhrtim,
                              uint32_t Event,
                              HRTIM_EventCfgTypeDef *pEventCfg)
{
 800331c:	b480      	push	{r7}
 800331e:	b089      	sub	sp, #36	; 0x24
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_eecr1;
  uint32_t hrtim_eecr2;
  uint32_t hrtim_eecr3;

  /* Configure external event channel */
  hrtim_eecr1 = hhrtim->Instance->sCommonRegs.EECR1;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 8003330:	61fb      	str	r3, [r7, #28]
  hrtim_eecr2 = hhrtim->Instance->sCommonRegs.EECR2;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800333a:	61bb      	str	r3, [r7, #24]
  hrtim_eecr3 = hhrtim->Instance->sCommonRegs.EECR3;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 8003344:	617b      	str	r3, [r7, #20]

  switch (Event)
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2b0a      	cmp	r3, #10
 800334a:	f200 8208 	bhi.w	800375e <HRTIM_EventConfig+0x442>
 800334e:	a201      	add	r2, pc, #4	; (adr r2, 8003354 <HRTIM_EventConfig+0x38>)
 8003350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003354:	08003381 	.word	0x08003381
 8003358:	080033a1 	.word	0x080033a1
 800335c:	080033f7 	.word	0x080033f7
 8003360:	08003453 	.word	0x08003453
 8003364:	080034b1 	.word	0x080034b1
 8003368:	0800350f 	.word	0x0800350f
 800336c:	0800356d 	.word	0x0800356d
 8003370:	080035cb 	.word	0x080035cb
 8003374:	0800362f 	.word	0x0800362f
 8003378:	08003693 	.word	0x08003693
 800337c:	080036f9 	.word	0x080036f9
  {
  case HRTIM_EVENT_NONE:
    {
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR1 = 0U;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2200      	movs	r2, #0
 8003386:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      hhrtim->Instance->sCommonRegs.EECR2 = 0U;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2200      	movs	r2, #0
 8003390:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = 0U;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2200      	movs	r2, #0
 800339a:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
      break;
 800339e:	e1df      	b.n	8003760 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_1:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE1SRC | HRTIM_EECR1_EE1POL | HRTIM_EECR1_EE1SNS | HRTIM_EECR1_EE1FAST);
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033a6:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Source & HRTIM_EECR1_EE1SRC);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0303 	and.w	r3, r3, #3
 80033b0:	69fa      	ldr	r2, [r7, #28]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Polarity & HRTIM_EECR1_EE1POL);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f003 0304 	and.w	r3, r3, #4
 80033be:	69fa      	ldr	r2, [r7, #28]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Sensitivity & HRTIM_EECR1_EE1SNS);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f003 0318 	and.w	r3, r3, #24
 80033cc:	69fa      	ldr	r2, [r7, #28]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE1FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	69fa      	ldr	r2, [r7, #28]
 80033d8:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      /* Update the HRTIM registers (EE1FAST bit) */
      hrtim_eecr1 |= (pEventCfg->FastMode  & HRTIM_EECR1_EE1FAST);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	f003 0320 	and.w	r3, r3, #32
 80033e4:	69fa      	ldr	r2, [r7, #28]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	69fa      	ldr	r2, [r7, #28]
 80033f0:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      break;
 80033f4:	e1b4      	b.n	8003760 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_2:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE2SRC | HRTIM_EECR1_EE2POL | HRTIM_EECR1_EE2SNS | HRTIM_EECR1_EE2FAST);
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	f423 637c 	bic.w	r3, r3, #4032	; 0xfc0
 80033fc:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 6U) & HRTIM_EECR1_EE2SRC);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	019b      	lsls	r3, r3, #6
 8003404:	b2db      	uxtb	r3, r3
 8003406:	69fa      	ldr	r2, [r7, #28]
 8003408:	4313      	orrs	r3, r2
 800340a:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 6U) & HRTIM_EECR1_EE2POL);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	019b      	lsls	r3, r3, #6
 8003412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003416:	69fa      	ldr	r2, [r7, #28]
 8003418:	4313      	orrs	r3, r2
 800341a:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR1_EE2SNS);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	019b      	lsls	r3, r3, #6
 8003422:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003426:	69fa      	ldr	r2, [r7, #28]
 8003428:	4313      	orrs	r3, r2
 800342a:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE2FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	69fa      	ldr	r2, [r7, #28]
 8003432:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      /* Update the HRTIM registers (EE2FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 6U) & HRTIM_EECR1_EE2FAST);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	019b      	lsls	r3, r3, #6
 800343c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003440:	69fa      	ldr	r2, [r7, #28]
 8003442:	4313      	orrs	r3, r2
 8003444:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	69fa      	ldr	r2, [r7, #28]
 800344c:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      break;
 8003450:	e186      	b.n	8003760 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_3:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE3SRC | HRTIM_EECR1_EE3POL | HRTIM_EECR1_EE3SNS | HRTIM_EECR1_EE3FAST);
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003458:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 12U) & HRTIM_EECR1_EE3SRC);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	031b      	lsls	r3, r3, #12
 8003460:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003464:	69fa      	ldr	r2, [r7, #28]
 8003466:	4313      	orrs	r3, r2
 8003468:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 12U) & HRTIM_EECR1_EE3POL);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	031b      	lsls	r3, r3, #12
 8003470:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003474:	69fa      	ldr	r2, [r7, #28]
 8003476:	4313      	orrs	r3, r2
 8003478:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR1_EE3SNS);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	031b      	lsls	r3, r3, #12
 8003480:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003484:	69fa      	ldr	r2, [r7, #28]
 8003486:	4313      	orrs	r3, r2
 8003488:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE3FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	69fa      	ldr	r2, [r7, #28]
 8003490:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      /* Update the HRTIM registers (EE3FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 12U) & HRTIM_EECR1_EE3FAST);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	031b      	lsls	r3, r3, #12
 800349a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349e:	69fa      	ldr	r2, [r7, #28]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	69fa      	ldr	r2, [r7, #28]
 80034aa:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      break;
 80034ae:	e157      	b.n	8003760 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_4:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE4SRC | HRTIM_EECR1_EE4POL | HRTIM_EECR1_EE4SNS | HRTIM_EECR1_EE4FAST);
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	f423 037c 	bic.w	r3, r3, #16515072	; 0xfc0000
 80034b6:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 18U) & HRTIM_EECR1_EE4SRC);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	049b      	lsls	r3, r3, #18
 80034be:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80034c2:	69fa      	ldr	r2, [r7, #28]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 18U) & HRTIM_EECR1_EE4POL);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	049b      	lsls	r3, r3, #18
 80034ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034d2:	69fa      	ldr	r2, [r7, #28]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR1_EE4SNS);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	049b      	lsls	r3, r3, #18
 80034de:	f403 03c0 	and.w	r3, r3, #6291456	; 0x600000
 80034e2:	69fa      	ldr	r2, [r7, #28]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE4FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	69fa      	ldr	r2, [r7, #28]
 80034ee:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      /* Update the HRTIM registers (EE4FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 18U) & HRTIM_EECR1_EE4FAST);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	049b      	lsls	r3, r3, #18
 80034f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034fc:	69fa      	ldr	r2, [r7, #28]
 80034fe:	4313      	orrs	r3, r2
 8003500:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	69fa      	ldr	r2, [r7, #28]
 8003508:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      break;
 800350c:	e128      	b.n	8003760 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_5:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE5SRC | HRTIM_EECR1_EE5POL | HRTIM_EECR1_EE5SNS | HRTIM_EECR1_EE5FAST);
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8003514:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 24U) & HRTIM_EECR1_EE5SRC);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	061b      	lsls	r3, r3, #24
 800351c:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8003520:	69fa      	ldr	r2, [r7, #28]
 8003522:	4313      	orrs	r3, r2
 8003524:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR1_EE5POL);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	061b      	lsls	r3, r3, #24
 800352c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003530:	69fa      	ldr	r2, [r7, #28]
 8003532:	4313      	orrs	r3, r2
 8003534:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR1_EE5SNS);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	061b      	lsls	r3, r3, #24
 800353c:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8003540:	69fa      	ldr	r2, [r7, #28]
 8003542:	4313      	orrs	r3, r2
 8003544:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE5FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	69fa      	ldr	r2, [r7, #28]
 800354c:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      /* Update the HRTIM registers (EE5FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 24U) & HRTIM_EECR1_EE5FAST);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	061b      	lsls	r3, r3, #24
 8003556:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800355a:	69fa      	ldr	r2, [r7, #28]
 800355c:	4313      	orrs	r3, r2
 800355e:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	69fa      	ldr	r2, [r7, #28]
 8003566:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      break;
 800356a:	e0f9      	b.n	8003760 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_6:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE6SRC | HRTIM_EECR2_EE6POL | HRTIM_EECR2_EE6SNS);
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	f023 031f 	bic.w	r3, r3, #31
 8003572:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Source & HRTIM_EECR2_EE6SRC);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0303 	and.w	r3, r3, #3
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	4313      	orrs	r3, r2
 8003580:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Polarity & HRTIM_EECR2_EE6POL);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f003 0304 	and.w	r3, r3, #4
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	4313      	orrs	r3, r2
 800358e:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Sensitivity & HRTIM_EECR2_EE6SNS);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 0318 	and.w	r3, r3, #24
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	4313      	orrs	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE6F);
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f023 030f 	bic.w	r3, r3, #15
 80035a4:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= (pEventCfg->Filter & HRTIM_EECR3_EE6F);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	f003 030f 	and.w	r3, r3, #15
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
      break;
 80035c8:	e0ca      	b.n	8003760 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_7:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE7SRC | HRTIM_EECR2_EE7POL | HRTIM_EECR2_EE7SNS);
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
 80035d0:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 6U) & HRTIM_EECR2_EE7SRC);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	019b      	lsls	r3, r3, #6
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	4313      	orrs	r3, r2
 80035de:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 6U) & HRTIM_EECR2_EE7POL);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	019b      	lsls	r3, r3, #6
 80035e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR2_EE7SNS);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	019b      	lsls	r3, r3, #6
 80035f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE7F);
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	f423 7370 	bic.w	r3, r3, #960	; 0x3c0
 8003606:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 6U) & HRTIM_EECR3_EE7F);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	019b      	lsls	r3, r3, #6
 800360e:	f403 7370 	and.w	r3, r3, #960	; 0x3c0
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	4313      	orrs	r3, r2
 8003616:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
      break;
 800362c:	e098      	b.n	8003760 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_8:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE8SRC | HRTIM_EECR2_EE8POL | HRTIM_EECR2_EE8SNS);
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	f423 33f8 	bic.w	r3, r3, #126976	; 0x1f000
 8003634:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 12U) & HRTIM_EECR2_EE8SRC);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	031b      	lsls	r3, r3, #12
 800363c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	4313      	orrs	r3, r2
 8003644:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 12U) & HRTIM_EECR2_EE8POL);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	031b      	lsls	r3, r3, #12
 800364c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	4313      	orrs	r3, r2
 8003654:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR2_EE8SNS);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	031b      	lsls	r3, r3, #12
 800365c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	4313      	orrs	r3, r2
 8003664:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE8F);
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800366c:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 12U) & HRTIM_EECR3_EE8F );
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	031b      	lsls	r3, r3, #12
 8003674:	b29b      	uxth	r3, r3
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	4313      	orrs	r3, r2
 800367a:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
      break;
 8003690:	e066      	b.n	8003760 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_9:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE9SRC | HRTIM_EECR2_EE9POL | HRTIM_EECR2_EE9SNS);
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	f423 03f8 	bic.w	r3, r3, #8126464	; 0x7c0000
 8003698:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 18U) & HRTIM_EECR2_EE9SRC);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	049b      	lsls	r3, r3, #18
 80036a0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 18U) & HRTIM_EECR2_EE9POL);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	049b      	lsls	r3, r3, #18
 80036b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR2_EE9SNS);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	049b      	lsls	r3, r3, #18
 80036c0:	f403 03c0 	and.w	r3, r3, #6291456	; 0x600000
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE9F);
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 80036d0:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 18U) & HRTIM_EECR3_EE9F);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	049b      	lsls	r3, r3, #18
 80036d8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	4313      	orrs	r3, r2
 80036e0:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
      break;
 80036f6:	e033      	b.n	8003760 <HRTIM_EventConfig+0x444>
    }

  case HRTIM_EVENT_10:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE10SRC | HRTIM_EECR2_EE10POL | HRTIM_EECR2_EE10SNS);
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80036fe:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 24U) & HRTIM_EECR2_EE10SRC);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	061b      	lsls	r3, r3, #24
 8003706:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	4313      	orrs	r3, r2
 800370e:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR2_EE10POL);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	061b      	lsls	r3, r3, #24
 8003716:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800371a:	69ba      	ldr	r2, [r7, #24]
 800371c:	4313      	orrs	r3, r2
 800371e:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR2_EE10SNS);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	061b      	lsls	r3, r3, #24
 8003726:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	4313      	orrs	r3, r2
 800372e:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE10F);
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8003736:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 24U) & HRTIM_EECR3_EE10F);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	061b      	lsls	r3, r3, #24
 800373e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	4313      	orrs	r3, r2
 8003746:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
      break;
 800375c:	e000      	b.n	8003760 <HRTIM_EventConfig+0x444>
    }

  default:
    break;
 800375e:	bf00      	nop
  }
}
 8003760:	bf00      	nop
 8003762:	3724      	adds	r7, #36	; 0x24
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	2b05      	cmp	r3, #5
 800377a:	d851      	bhi.n	8003820 <HRTIM_ForceRegistersUpdate+0xb4>
 800377c:	a201      	add	r2, pc, #4	; (adr r2, 8003784 <HRTIM_ForceRegistersUpdate+0x18>)
 800377e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003782:	bf00      	nop
 8003784:	080037b3 	.word	0x080037b3
 8003788:	080037c9 	.word	0x080037c9
 800378c:	080037df 	.word	0x080037df
 8003790:	080037f5 	.word	0x080037f5
 8003794:	0800380b 	.word	0x0800380b
 8003798:	0800379d 	.word	0x0800379d
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f042 0201 	orr.w	r2, r2, #1
 80037ac:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80037b0:	e037      	b.n	8003822 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 0202 	orr.w	r2, r2, #2
 80037c2:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80037c6:	e02c      	b.n	8003822 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f042 0204 	orr.w	r2, r2, #4
 80037d8:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80037dc:	e021      	b.n	8003822 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 0208 	orr.w	r2, r2, #8
 80037ee:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80037f2:	e016      	b.n	8003822 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f042 0210 	orr.w	r2, r2, #16
 8003804:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8003808:	e00b      	b.n	8003822 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f042 0220 	orr.w	r2, r2, #32
 800381a:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800381e:	e000      	b.n	8003822 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 8003820:	bf00      	nop
  }
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop

08003830 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003836:	af00      	add	r7, sp, #0
 8003838:	1d3b      	adds	r3, r7, #4
 800383a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800383c:	1d3b      	adds	r3, r7, #4
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d102      	bne.n	800384a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	f000 bef4 	b.w	8004632 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800384a:	1d3b      	adds	r3, r7, #4
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b00      	cmp	r3, #0
 8003856:	f000 816a 	beq.w	8003b2e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800385a:	4bb3      	ldr	r3, [pc, #716]	; (8003b28 <HAL_RCC_OscConfig+0x2f8>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f003 030c 	and.w	r3, r3, #12
 8003862:	2b04      	cmp	r3, #4
 8003864:	d00c      	beq.n	8003880 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003866:	4bb0      	ldr	r3, [pc, #704]	; (8003b28 <HAL_RCC_OscConfig+0x2f8>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f003 030c 	and.w	r3, r3, #12
 800386e:	2b08      	cmp	r3, #8
 8003870:	d159      	bne.n	8003926 <HAL_RCC_OscConfig+0xf6>
 8003872:	4bad      	ldr	r3, [pc, #692]	; (8003b28 <HAL_RCC_OscConfig+0x2f8>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800387a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800387e:	d152      	bne.n	8003926 <HAL_RCC_OscConfig+0xf6>
 8003880:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003884:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003888:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800388c:	fa93 f3a3 	rbit	r3, r3
 8003890:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003894:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003898:	fab3 f383 	clz	r3, r3
 800389c:	b2db      	uxtb	r3, r3
 800389e:	095b      	lsrs	r3, r3, #5
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	f043 0301 	orr.w	r3, r3, #1
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d102      	bne.n	80038b2 <HAL_RCC_OscConfig+0x82>
 80038ac:	4b9e      	ldr	r3, [pc, #632]	; (8003b28 <HAL_RCC_OscConfig+0x2f8>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	e015      	b.n	80038de <HAL_RCC_OscConfig+0xae>
 80038b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038b6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ba:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80038be:	fa93 f3a3 	rbit	r3, r3
 80038c2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80038c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038ca:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80038ce:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80038d2:	fa93 f3a3 	rbit	r3, r3
 80038d6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80038da:	4b93      	ldr	r3, [pc, #588]	; (8003b28 <HAL_RCC_OscConfig+0x2f8>)
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80038e2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80038e6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80038ea:	fa92 f2a2 	rbit	r2, r2
 80038ee:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80038f2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80038f6:	fab2 f282 	clz	r2, r2
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	f042 0220 	orr.w	r2, r2, #32
 8003900:	b2d2      	uxtb	r2, r2
 8003902:	f002 021f 	and.w	r2, r2, #31
 8003906:	2101      	movs	r1, #1
 8003908:	fa01 f202 	lsl.w	r2, r1, r2
 800390c:	4013      	ands	r3, r2
 800390e:	2b00      	cmp	r3, #0
 8003910:	f000 810c 	beq.w	8003b2c <HAL_RCC_OscConfig+0x2fc>
 8003914:	1d3b      	adds	r3, r7, #4
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	f040 8106 	bne.w	8003b2c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	f000 be86 	b.w	8004632 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003926:	1d3b      	adds	r3, r7, #4
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003930:	d106      	bne.n	8003940 <HAL_RCC_OscConfig+0x110>
 8003932:	4b7d      	ldr	r3, [pc, #500]	; (8003b28 <HAL_RCC_OscConfig+0x2f8>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a7c      	ldr	r2, [pc, #496]	; (8003b28 <HAL_RCC_OscConfig+0x2f8>)
 8003938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	e030      	b.n	80039a2 <HAL_RCC_OscConfig+0x172>
 8003940:	1d3b      	adds	r3, r7, #4
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10c      	bne.n	8003964 <HAL_RCC_OscConfig+0x134>
 800394a:	4b77      	ldr	r3, [pc, #476]	; (8003b28 <HAL_RCC_OscConfig+0x2f8>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a76      	ldr	r2, [pc, #472]	; (8003b28 <HAL_RCC_OscConfig+0x2f8>)
 8003950:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003954:	6013      	str	r3, [r2, #0]
 8003956:	4b74      	ldr	r3, [pc, #464]	; (8003b28 <HAL_RCC_OscConfig+0x2f8>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a73      	ldr	r2, [pc, #460]	; (8003b28 <HAL_RCC_OscConfig+0x2f8>)
 800395c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003960:	6013      	str	r3, [r2, #0]
 8003962:	e01e      	b.n	80039a2 <HAL_RCC_OscConfig+0x172>
 8003964:	1d3b      	adds	r3, r7, #4
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800396e:	d10c      	bne.n	800398a <HAL_RCC_OscConfig+0x15a>
 8003970:	4b6d      	ldr	r3, [pc, #436]	; (8003b28 <HAL_RCC_OscConfig+0x2f8>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a6c      	ldr	r2, [pc, #432]	; (8003b28 <HAL_RCC_OscConfig+0x2f8>)
 8003976:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800397a:	6013      	str	r3, [r2, #0]
 800397c:	4b6a      	ldr	r3, [pc, #424]	; (8003b28 <HAL_RCC_OscConfig+0x2f8>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a69      	ldr	r2, [pc, #420]	; (8003b28 <HAL_RCC_OscConfig+0x2f8>)
 8003982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003986:	6013      	str	r3, [r2, #0]
 8003988:	e00b      	b.n	80039a2 <HAL_RCC_OscConfig+0x172>
 800398a:	4b67      	ldr	r3, [pc, #412]	; (8003b28 <HAL_RCC_OscConfig+0x2f8>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a66      	ldr	r2, [pc, #408]	; (8003b28 <HAL_RCC_OscConfig+0x2f8>)
 8003990:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	4b64      	ldr	r3, [pc, #400]	; (8003b28 <HAL_RCC_OscConfig+0x2f8>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a63      	ldr	r2, [pc, #396]	; (8003b28 <HAL_RCC_OscConfig+0x2f8>)
 800399c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039a0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80039a2:	4b61      	ldr	r3, [pc, #388]	; (8003b28 <HAL_RCC_OscConfig+0x2f8>)
 80039a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a6:	f023 020f 	bic.w	r2, r3, #15
 80039aa:	1d3b      	adds	r3, r7, #4
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	495d      	ldr	r1, [pc, #372]	; (8003b28 <HAL_RCC_OscConfig+0x2f8>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039b6:	1d3b      	adds	r3, r7, #4
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d059      	beq.n	8003a74 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c0:	f7fd f8f2 	bl	8000ba8 <HAL_GetTick>
 80039c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039c8:	e00a      	b.n	80039e0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039ca:	f7fd f8ed 	bl	8000ba8 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b64      	cmp	r3, #100	; 0x64
 80039d8:	d902      	bls.n	80039e0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	f000 be29 	b.w	8004632 <HAL_RCC_OscConfig+0xe02>
 80039e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039e4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80039ec:	fa93 f3a3 	rbit	r3, r3
 80039f0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80039f4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039f8:	fab3 f383 	clz	r3, r3
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	095b      	lsrs	r3, r3, #5
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	f043 0301 	orr.w	r3, r3, #1
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d102      	bne.n	8003a12 <HAL_RCC_OscConfig+0x1e2>
 8003a0c:	4b46      	ldr	r3, [pc, #280]	; (8003b28 <HAL_RCC_OscConfig+0x2f8>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	e015      	b.n	8003a3e <HAL_RCC_OscConfig+0x20e>
 8003a12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a16:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003a1e:	fa93 f3a3 	rbit	r3, r3
 8003a22:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003a26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a2a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003a2e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003a32:	fa93 f3a3 	rbit	r3, r3
 8003a36:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003a3a:	4b3b      	ldr	r3, [pc, #236]	; (8003b28 <HAL_RCC_OscConfig+0x2f8>)
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a42:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003a46:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003a4a:	fa92 f2a2 	rbit	r2, r2
 8003a4e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003a52:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003a56:	fab2 f282 	clz	r2, r2
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	f042 0220 	orr.w	r2, r2, #32
 8003a60:	b2d2      	uxtb	r2, r2
 8003a62:	f002 021f 	and.w	r2, r2, #31
 8003a66:	2101      	movs	r1, #1
 8003a68:	fa01 f202 	lsl.w	r2, r1, r2
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d0ab      	beq.n	80039ca <HAL_RCC_OscConfig+0x19a>
 8003a72:	e05c      	b.n	8003b2e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a74:	f7fd f898 	bl	8000ba8 <HAL_GetTick>
 8003a78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a7c:	e00a      	b.n	8003a94 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a7e:	f7fd f893 	bl	8000ba8 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b64      	cmp	r3, #100	; 0x64
 8003a8c:	d902      	bls.n	8003a94 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	f000 bdcf 	b.w	8004632 <HAL_RCC_OscConfig+0xe02>
 8003a94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a98:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003aa0:	fa93 f3a3 	rbit	r3, r3
 8003aa4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003aa8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aac:	fab3 f383 	clz	r3, r3
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	095b      	lsrs	r3, r3, #5
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	f043 0301 	orr.w	r3, r3, #1
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d102      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x296>
 8003ac0:	4b19      	ldr	r3, [pc, #100]	; (8003b28 <HAL_RCC_OscConfig+0x2f8>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	e015      	b.n	8003af2 <HAL_RCC_OscConfig+0x2c2>
 8003ac6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003aca:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ace:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003ad2:	fa93 f3a3 	rbit	r3, r3
 8003ad6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003ada:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ade:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003ae2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003ae6:	fa93 f3a3 	rbit	r3, r3
 8003aea:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003aee:	4b0e      	ldr	r3, [pc, #56]	; (8003b28 <HAL_RCC_OscConfig+0x2f8>)
 8003af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003af6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003afa:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003afe:	fa92 f2a2 	rbit	r2, r2
 8003b02:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003b06:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003b0a:	fab2 f282 	clz	r2, r2
 8003b0e:	b2d2      	uxtb	r2, r2
 8003b10:	f042 0220 	orr.w	r2, r2, #32
 8003b14:	b2d2      	uxtb	r2, r2
 8003b16:	f002 021f 	and.w	r2, r2, #31
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b20:	4013      	ands	r3, r2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1ab      	bne.n	8003a7e <HAL_RCC_OscConfig+0x24e>
 8003b26:	e002      	b.n	8003b2e <HAL_RCC_OscConfig+0x2fe>
 8003b28:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b2e:	1d3b      	adds	r3, r7, #4
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 816f 	beq.w	8003e1c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003b3e:	4bd0      	ldr	r3, [pc, #832]	; (8003e80 <HAL_RCC_OscConfig+0x650>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f003 030c 	and.w	r3, r3, #12
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00b      	beq.n	8003b62 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003b4a:	4bcd      	ldr	r3, [pc, #820]	; (8003e80 <HAL_RCC_OscConfig+0x650>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f003 030c 	and.w	r3, r3, #12
 8003b52:	2b08      	cmp	r3, #8
 8003b54:	d16c      	bne.n	8003c30 <HAL_RCC_OscConfig+0x400>
 8003b56:	4bca      	ldr	r3, [pc, #808]	; (8003e80 <HAL_RCC_OscConfig+0x650>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d166      	bne.n	8003c30 <HAL_RCC_OscConfig+0x400>
 8003b62:	2302      	movs	r3, #2
 8003b64:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b68:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003b6c:	fa93 f3a3 	rbit	r3, r3
 8003b70:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003b74:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b78:	fab3 f383 	clz	r3, r3
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	095b      	lsrs	r3, r3, #5
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	f043 0301 	orr.w	r3, r3, #1
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d102      	bne.n	8003b92 <HAL_RCC_OscConfig+0x362>
 8003b8c:	4bbc      	ldr	r3, [pc, #752]	; (8003e80 <HAL_RCC_OscConfig+0x650>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	e013      	b.n	8003bba <HAL_RCC_OscConfig+0x38a>
 8003b92:	2302      	movs	r3, #2
 8003b94:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b98:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003b9c:	fa93 f3a3 	rbit	r3, r3
 8003ba0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003baa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003bae:	fa93 f3a3 	rbit	r3, r3
 8003bb2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003bb6:	4bb2      	ldr	r3, [pc, #712]	; (8003e80 <HAL_RCC_OscConfig+0x650>)
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bba:	2202      	movs	r2, #2
 8003bbc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003bc0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003bc4:	fa92 f2a2 	rbit	r2, r2
 8003bc8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003bcc:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003bd0:	fab2 f282 	clz	r2, r2
 8003bd4:	b2d2      	uxtb	r2, r2
 8003bd6:	f042 0220 	orr.w	r2, r2, #32
 8003bda:	b2d2      	uxtb	r2, r2
 8003bdc:	f002 021f 	and.w	r2, r2, #31
 8003be0:	2101      	movs	r1, #1
 8003be2:	fa01 f202 	lsl.w	r2, r1, r2
 8003be6:	4013      	ands	r3, r2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d007      	beq.n	8003bfc <HAL_RCC_OscConfig+0x3cc>
 8003bec:	1d3b      	adds	r3, r7, #4
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d002      	beq.n	8003bfc <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	f000 bd1b 	b.w	8004632 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bfc:	4ba0      	ldr	r3, [pc, #640]	; (8003e80 <HAL_RCC_OscConfig+0x650>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c04:	1d3b      	adds	r3, r7, #4
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	21f8      	movs	r1, #248	; 0xf8
 8003c0c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c10:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003c14:	fa91 f1a1 	rbit	r1, r1
 8003c18:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003c1c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003c20:	fab1 f181 	clz	r1, r1
 8003c24:	b2c9      	uxtb	r1, r1
 8003c26:	408b      	lsls	r3, r1
 8003c28:	4995      	ldr	r1, [pc, #596]	; (8003e80 <HAL_RCC_OscConfig+0x650>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c2e:	e0f5      	b.n	8003e1c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c30:	1d3b      	adds	r3, r7, #4
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f000 8085 	beq.w	8003d46 <HAL_RCC_OscConfig+0x516>
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c42:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003c46:	fa93 f3a3 	rbit	r3, r3
 8003c4a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003c4e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c52:	fab3 f383 	clz	r3, r3
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c5c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	461a      	mov	r2, r3
 8003c64:	2301      	movs	r3, #1
 8003c66:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c68:	f7fc ff9e 	bl	8000ba8 <HAL_GetTick>
 8003c6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c70:	e00a      	b.n	8003c88 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c72:	f7fc ff99 	bl	8000ba8 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d902      	bls.n	8003c88 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	f000 bcd5 	b.w	8004632 <HAL_RCC_OscConfig+0xe02>
 8003c88:	2302      	movs	r3, #2
 8003c8a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003c92:	fa93 f3a3 	rbit	r3, r3
 8003c96:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003c9a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c9e:	fab3 f383 	clz	r3, r3
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	095b      	lsrs	r3, r3, #5
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	f043 0301 	orr.w	r3, r3, #1
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d102      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x488>
 8003cb2:	4b73      	ldr	r3, [pc, #460]	; (8003e80 <HAL_RCC_OscConfig+0x650>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	e013      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4b0>
 8003cb8:	2302      	movs	r3, #2
 8003cba:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cbe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003cc2:	fa93 f3a3 	rbit	r3, r3
 8003cc6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003cca:	2302      	movs	r3, #2
 8003ccc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003cd0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003cd4:	fa93 f3a3 	rbit	r3, r3
 8003cd8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003cdc:	4b68      	ldr	r3, [pc, #416]	; (8003e80 <HAL_RCC_OscConfig+0x650>)
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003ce6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003cea:	fa92 f2a2 	rbit	r2, r2
 8003cee:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003cf2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003cf6:	fab2 f282 	clz	r2, r2
 8003cfa:	b2d2      	uxtb	r2, r2
 8003cfc:	f042 0220 	orr.w	r2, r2, #32
 8003d00:	b2d2      	uxtb	r2, r2
 8003d02:	f002 021f 	and.w	r2, r2, #31
 8003d06:	2101      	movs	r1, #1
 8003d08:	fa01 f202 	lsl.w	r2, r1, r2
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d0af      	beq.n	8003c72 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d12:	4b5b      	ldr	r3, [pc, #364]	; (8003e80 <HAL_RCC_OscConfig+0x650>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d1a:	1d3b      	adds	r3, r7, #4
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	21f8      	movs	r1, #248	; 0xf8
 8003d22:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d26:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003d2a:	fa91 f1a1 	rbit	r1, r1
 8003d2e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003d32:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003d36:	fab1 f181 	clz	r1, r1
 8003d3a:	b2c9      	uxtb	r1, r1
 8003d3c:	408b      	lsls	r3, r1
 8003d3e:	4950      	ldr	r1, [pc, #320]	; (8003e80 <HAL_RCC_OscConfig+0x650>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	600b      	str	r3, [r1, #0]
 8003d44:	e06a      	b.n	8003e1c <HAL_RCC_OscConfig+0x5ec>
 8003d46:	2301      	movs	r3, #1
 8003d48:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003d50:	fa93 f3a3 	rbit	r3, r3
 8003d54:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003d58:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d5c:	fab3 f383 	clz	r3, r3
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d66:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	2300      	movs	r3, #0
 8003d70:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d72:	f7fc ff19 	bl	8000ba8 <HAL_GetTick>
 8003d76:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d7a:	e00a      	b.n	8003d92 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d7c:	f7fc ff14 	bl	8000ba8 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d902      	bls.n	8003d92 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	f000 bc50 	b.w	8004632 <HAL_RCC_OscConfig+0xe02>
 8003d92:	2302      	movs	r3, #2
 8003d94:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d98:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003d9c:	fa93 f3a3 	rbit	r3, r3
 8003da0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003da4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003da8:	fab3 f383 	clz	r3, r3
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	095b      	lsrs	r3, r3, #5
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	f043 0301 	orr.w	r3, r3, #1
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d102      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x592>
 8003dbc:	4b30      	ldr	r3, [pc, #192]	; (8003e80 <HAL_RCC_OscConfig+0x650>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	e013      	b.n	8003dea <HAL_RCC_OscConfig+0x5ba>
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003dcc:	fa93 f3a3 	rbit	r3, r3
 8003dd0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003dda:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003dde:	fa93 f3a3 	rbit	r3, r3
 8003de2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003de6:	4b26      	ldr	r3, [pc, #152]	; (8003e80 <HAL_RCC_OscConfig+0x650>)
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	2202      	movs	r2, #2
 8003dec:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003df0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003df4:	fa92 f2a2 	rbit	r2, r2
 8003df8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003dfc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003e00:	fab2 f282 	clz	r2, r2
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	f042 0220 	orr.w	r2, r2, #32
 8003e0a:	b2d2      	uxtb	r2, r2
 8003e0c:	f002 021f 	and.w	r2, r2, #31
 8003e10:	2101      	movs	r1, #1
 8003e12:	fa01 f202 	lsl.w	r2, r1, r2
 8003e16:	4013      	ands	r3, r2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1af      	bne.n	8003d7c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e1c:	1d3b      	adds	r3, r7, #4
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0308 	and.w	r3, r3, #8
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f000 80da 	beq.w	8003fe0 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e2c:	1d3b      	adds	r3, r7, #4
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d069      	beq.n	8003f0a <HAL_RCC_OscConfig+0x6da>
 8003e36:	2301      	movs	r3, #1
 8003e38:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003e40:	fa93 f3a3 	rbit	r3, r3
 8003e44:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003e48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e4c:	fab3 f383 	clz	r3, r3
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	461a      	mov	r2, r3
 8003e54:	4b0b      	ldr	r3, [pc, #44]	; (8003e84 <HAL_RCC_OscConfig+0x654>)
 8003e56:	4413      	add	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e60:	f7fc fea2 	bl	8000ba8 <HAL_GetTick>
 8003e64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e68:	e00e      	b.n	8003e88 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e6a:	f7fc fe9d 	bl	8000ba8 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d906      	bls.n	8003e88 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e3d9      	b.n	8004632 <HAL_RCC_OscConfig+0xe02>
 8003e7e:	bf00      	nop
 8003e80:	40021000 	.word	0x40021000
 8003e84:	10908120 	.word	0x10908120
 8003e88:	2302      	movs	r3, #2
 8003e8a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003e92:	fa93 f3a3 	rbit	r3, r3
 8003e96:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003e9a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	601a      	str	r2, [r3, #0]
 8003ea2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	fa93 f2a3 	rbit	r2, r3
 8003eac:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003eb0:	601a      	str	r2, [r3, #0]
 8003eb2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	601a      	str	r2, [r3, #0]
 8003eba:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	fa93 f2a3 	rbit	r2, r3
 8003ec4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003ec8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eca:	4ba5      	ldr	r3, [pc, #660]	; (8004160 <HAL_RCC_OscConfig+0x930>)
 8003ecc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ece:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003ed2:	2102      	movs	r1, #2
 8003ed4:	6019      	str	r1, [r3, #0]
 8003ed6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	fa93 f1a3 	rbit	r1, r3
 8003ee0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003ee4:	6019      	str	r1, [r3, #0]
  return result;
 8003ee6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	fab3 f383 	clz	r3, r3
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	f003 031f 	and.w	r3, r3, #31
 8003efc:	2101      	movs	r1, #1
 8003efe:	fa01 f303 	lsl.w	r3, r1, r3
 8003f02:	4013      	ands	r3, r2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d0b0      	beq.n	8003e6a <HAL_RCC_OscConfig+0x63a>
 8003f08:	e06a      	b.n	8003fe0 <HAL_RCC_OscConfig+0x7b0>
 8003f0a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003f0e:	2201      	movs	r2, #1
 8003f10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f12:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	fa93 f2a3 	rbit	r2, r3
 8003f1c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003f20:	601a      	str	r2, [r3, #0]
  return result;
 8003f22:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003f26:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f28:	fab3 f383 	clz	r3, r3
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	461a      	mov	r2, r3
 8003f30:	4b8c      	ldr	r3, [pc, #560]	; (8004164 <HAL_RCC_OscConfig+0x934>)
 8003f32:	4413      	add	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	461a      	mov	r2, r3
 8003f38:	2300      	movs	r3, #0
 8003f3a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f3c:	f7fc fe34 	bl	8000ba8 <HAL_GetTick>
 8003f40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f44:	e009      	b.n	8003f5a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f46:	f7fc fe2f 	bl	8000ba8 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e36b      	b.n	8004632 <HAL_RCC_OscConfig+0xe02>
 8003f5a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003f5e:	2202      	movs	r2, #2
 8003f60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f62:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	fa93 f2a3 	rbit	r2, r3
 8003f6c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003f70:	601a      	str	r2, [r3, #0]
 8003f72:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003f76:	2202      	movs	r2, #2
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	fa93 f2a3 	rbit	r2, r3
 8003f84:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003f8e:	2202      	movs	r2, #2
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	fa93 f2a3 	rbit	r2, r3
 8003f9c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003fa0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fa2:	4b6f      	ldr	r3, [pc, #444]	; (8004160 <HAL_RCC_OscConfig+0x930>)
 8003fa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fa6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003faa:	2102      	movs	r1, #2
 8003fac:	6019      	str	r1, [r3, #0]
 8003fae:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	fa93 f1a3 	rbit	r1, r3
 8003fb8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003fbc:	6019      	str	r1, [r3, #0]
  return result;
 8003fbe:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	fab3 f383 	clz	r3, r3
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	f003 031f 	and.w	r3, r3, #31
 8003fd4:	2101      	movs	r1, #1
 8003fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fda:	4013      	ands	r3, r2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1b2      	bne.n	8003f46 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fe0:	1d3b      	adds	r3, r7, #4
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0304 	and.w	r3, r3, #4
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f000 8158 	beq.w	80042a0 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ff6:	4b5a      	ldr	r3, [pc, #360]	; (8004160 <HAL_RCC_OscConfig+0x930>)
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d112      	bne.n	8004028 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004002:	4b57      	ldr	r3, [pc, #348]	; (8004160 <HAL_RCC_OscConfig+0x930>)
 8004004:	69db      	ldr	r3, [r3, #28]
 8004006:	4a56      	ldr	r2, [pc, #344]	; (8004160 <HAL_RCC_OscConfig+0x930>)
 8004008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800400c:	61d3      	str	r3, [r2, #28]
 800400e:	4b54      	ldr	r3, [pc, #336]	; (8004160 <HAL_RCC_OscConfig+0x930>)
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004016:	f107 0308 	add.w	r3, r7, #8
 800401a:	601a      	str	r2, [r3, #0]
 800401c:	f107 0308 	add.w	r3, r7, #8
 8004020:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004022:	2301      	movs	r3, #1
 8004024:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004028:	4b4f      	ldr	r3, [pc, #316]	; (8004168 <HAL_RCC_OscConfig+0x938>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004030:	2b00      	cmp	r3, #0
 8004032:	d11a      	bne.n	800406a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004034:	4b4c      	ldr	r3, [pc, #304]	; (8004168 <HAL_RCC_OscConfig+0x938>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a4b      	ldr	r2, [pc, #300]	; (8004168 <HAL_RCC_OscConfig+0x938>)
 800403a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800403e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004040:	f7fc fdb2 	bl	8000ba8 <HAL_GetTick>
 8004044:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004048:	e009      	b.n	800405e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800404a:	f7fc fdad 	bl	8000ba8 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b64      	cmp	r3, #100	; 0x64
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e2e9      	b.n	8004632 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800405e:	4b42      	ldr	r3, [pc, #264]	; (8004168 <HAL_RCC_OscConfig+0x938>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004066:	2b00      	cmp	r3, #0
 8004068:	d0ef      	beq.n	800404a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800406a:	1d3b      	adds	r3, r7, #4
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d106      	bne.n	8004082 <HAL_RCC_OscConfig+0x852>
 8004074:	4b3a      	ldr	r3, [pc, #232]	; (8004160 <HAL_RCC_OscConfig+0x930>)
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	4a39      	ldr	r2, [pc, #228]	; (8004160 <HAL_RCC_OscConfig+0x930>)
 800407a:	f043 0301 	orr.w	r3, r3, #1
 800407e:	6213      	str	r3, [r2, #32]
 8004080:	e02f      	b.n	80040e2 <HAL_RCC_OscConfig+0x8b2>
 8004082:	1d3b      	adds	r3, r7, #4
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10c      	bne.n	80040a6 <HAL_RCC_OscConfig+0x876>
 800408c:	4b34      	ldr	r3, [pc, #208]	; (8004160 <HAL_RCC_OscConfig+0x930>)
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	4a33      	ldr	r2, [pc, #204]	; (8004160 <HAL_RCC_OscConfig+0x930>)
 8004092:	f023 0301 	bic.w	r3, r3, #1
 8004096:	6213      	str	r3, [r2, #32]
 8004098:	4b31      	ldr	r3, [pc, #196]	; (8004160 <HAL_RCC_OscConfig+0x930>)
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	4a30      	ldr	r2, [pc, #192]	; (8004160 <HAL_RCC_OscConfig+0x930>)
 800409e:	f023 0304 	bic.w	r3, r3, #4
 80040a2:	6213      	str	r3, [r2, #32]
 80040a4:	e01d      	b.n	80040e2 <HAL_RCC_OscConfig+0x8b2>
 80040a6:	1d3b      	adds	r3, r7, #4
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	2b05      	cmp	r3, #5
 80040ae:	d10c      	bne.n	80040ca <HAL_RCC_OscConfig+0x89a>
 80040b0:	4b2b      	ldr	r3, [pc, #172]	; (8004160 <HAL_RCC_OscConfig+0x930>)
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	4a2a      	ldr	r2, [pc, #168]	; (8004160 <HAL_RCC_OscConfig+0x930>)
 80040b6:	f043 0304 	orr.w	r3, r3, #4
 80040ba:	6213      	str	r3, [r2, #32]
 80040bc:	4b28      	ldr	r3, [pc, #160]	; (8004160 <HAL_RCC_OscConfig+0x930>)
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	4a27      	ldr	r2, [pc, #156]	; (8004160 <HAL_RCC_OscConfig+0x930>)
 80040c2:	f043 0301 	orr.w	r3, r3, #1
 80040c6:	6213      	str	r3, [r2, #32]
 80040c8:	e00b      	b.n	80040e2 <HAL_RCC_OscConfig+0x8b2>
 80040ca:	4b25      	ldr	r3, [pc, #148]	; (8004160 <HAL_RCC_OscConfig+0x930>)
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	4a24      	ldr	r2, [pc, #144]	; (8004160 <HAL_RCC_OscConfig+0x930>)
 80040d0:	f023 0301 	bic.w	r3, r3, #1
 80040d4:	6213      	str	r3, [r2, #32]
 80040d6:	4b22      	ldr	r3, [pc, #136]	; (8004160 <HAL_RCC_OscConfig+0x930>)
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	4a21      	ldr	r2, [pc, #132]	; (8004160 <HAL_RCC_OscConfig+0x930>)
 80040dc:	f023 0304 	bic.w	r3, r3, #4
 80040e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040e2:	1d3b      	adds	r3, r7, #4
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d06b      	beq.n	80041c4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ec:	f7fc fd5c 	bl	8000ba8 <HAL_GetTick>
 80040f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040f4:	e00b      	b.n	800410e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040f6:	f7fc fd57 	bl	8000ba8 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	f241 3288 	movw	r2, #5000	; 0x1388
 8004106:	4293      	cmp	r3, r2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e291      	b.n	8004632 <HAL_RCC_OscConfig+0xe02>
 800410e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004112:	2202      	movs	r2, #2
 8004114:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004116:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	fa93 f2a3 	rbit	r2, r3
 8004120:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004124:	601a      	str	r2, [r3, #0]
 8004126:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800412a:	2202      	movs	r2, #2
 800412c:	601a      	str	r2, [r3, #0]
 800412e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	fa93 f2a3 	rbit	r2, r3
 8004138:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800413c:	601a      	str	r2, [r3, #0]
  return result;
 800413e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004142:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004144:	fab3 f383 	clz	r3, r3
 8004148:	b2db      	uxtb	r3, r3
 800414a:	095b      	lsrs	r3, r3, #5
 800414c:	b2db      	uxtb	r3, r3
 800414e:	f043 0302 	orr.w	r3, r3, #2
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d109      	bne.n	800416c <HAL_RCC_OscConfig+0x93c>
 8004158:	4b01      	ldr	r3, [pc, #4]	; (8004160 <HAL_RCC_OscConfig+0x930>)
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	e014      	b.n	8004188 <HAL_RCC_OscConfig+0x958>
 800415e:	bf00      	nop
 8004160:	40021000 	.word	0x40021000
 8004164:	10908120 	.word	0x10908120
 8004168:	40007000 	.word	0x40007000
 800416c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004170:	2202      	movs	r2, #2
 8004172:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004174:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	fa93 f2a3 	rbit	r2, r3
 800417e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	4bbb      	ldr	r3, [pc, #748]	; (8004474 <HAL_RCC_OscConfig+0xc44>)
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800418c:	2102      	movs	r1, #2
 800418e:	6011      	str	r1, [r2, #0]
 8004190:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004194:	6812      	ldr	r2, [r2, #0]
 8004196:	fa92 f1a2 	rbit	r1, r2
 800419a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800419e:	6011      	str	r1, [r2, #0]
  return result;
 80041a0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80041a4:	6812      	ldr	r2, [r2, #0]
 80041a6:	fab2 f282 	clz	r2, r2
 80041aa:	b2d2      	uxtb	r2, r2
 80041ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041b0:	b2d2      	uxtb	r2, r2
 80041b2:	f002 021f 	and.w	r2, r2, #31
 80041b6:	2101      	movs	r1, #1
 80041b8:	fa01 f202 	lsl.w	r2, r1, r2
 80041bc:	4013      	ands	r3, r2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d099      	beq.n	80040f6 <HAL_RCC_OscConfig+0x8c6>
 80041c2:	e063      	b.n	800428c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041c4:	f7fc fcf0 	bl	8000ba8 <HAL_GetTick>
 80041c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041cc:	e00b      	b.n	80041e6 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041ce:	f7fc fceb 	bl	8000ba8 <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	f241 3288 	movw	r2, #5000	; 0x1388
 80041de:	4293      	cmp	r3, r2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e225      	b.n	8004632 <HAL_RCC_OscConfig+0xe02>
 80041e6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80041ea:	2202      	movs	r2, #2
 80041ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ee:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	fa93 f2a3 	rbit	r2, r3
 80041f8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004202:	2202      	movs	r2, #2
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	fa93 f2a3 	rbit	r2, r3
 8004210:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004214:	601a      	str	r2, [r3, #0]
  return result;
 8004216:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800421a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800421c:	fab3 f383 	clz	r3, r3
 8004220:	b2db      	uxtb	r3, r3
 8004222:	095b      	lsrs	r3, r3, #5
 8004224:	b2db      	uxtb	r3, r3
 8004226:	f043 0302 	orr.w	r3, r3, #2
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b02      	cmp	r3, #2
 800422e:	d102      	bne.n	8004236 <HAL_RCC_OscConfig+0xa06>
 8004230:	4b90      	ldr	r3, [pc, #576]	; (8004474 <HAL_RCC_OscConfig+0xc44>)
 8004232:	6a1b      	ldr	r3, [r3, #32]
 8004234:	e00d      	b.n	8004252 <HAL_RCC_OscConfig+0xa22>
 8004236:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800423a:	2202      	movs	r2, #2
 800423c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800423e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	fa93 f2a3 	rbit	r2, r3
 8004248:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800424c:	601a      	str	r2, [r3, #0]
 800424e:	4b89      	ldr	r3, [pc, #548]	; (8004474 <HAL_RCC_OscConfig+0xc44>)
 8004250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004252:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004256:	2102      	movs	r1, #2
 8004258:	6011      	str	r1, [r2, #0]
 800425a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800425e:	6812      	ldr	r2, [r2, #0]
 8004260:	fa92 f1a2 	rbit	r1, r2
 8004264:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004268:	6011      	str	r1, [r2, #0]
  return result;
 800426a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800426e:	6812      	ldr	r2, [r2, #0]
 8004270:	fab2 f282 	clz	r2, r2
 8004274:	b2d2      	uxtb	r2, r2
 8004276:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800427a:	b2d2      	uxtb	r2, r2
 800427c:	f002 021f 	and.w	r2, r2, #31
 8004280:	2101      	movs	r1, #1
 8004282:	fa01 f202 	lsl.w	r2, r1, r2
 8004286:	4013      	ands	r3, r2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1a0      	bne.n	80041ce <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800428c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004290:	2b01      	cmp	r3, #1
 8004292:	d105      	bne.n	80042a0 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004294:	4b77      	ldr	r3, [pc, #476]	; (8004474 <HAL_RCC_OscConfig+0xc44>)
 8004296:	69db      	ldr	r3, [r3, #28]
 8004298:	4a76      	ldr	r2, [pc, #472]	; (8004474 <HAL_RCC_OscConfig+0xc44>)
 800429a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800429e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042a0:	1d3b      	adds	r3, r7, #4
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 81c2 	beq.w	8004630 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042ac:	4b71      	ldr	r3, [pc, #452]	; (8004474 <HAL_RCC_OscConfig+0xc44>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f003 030c 	and.w	r3, r3, #12
 80042b4:	2b08      	cmp	r3, #8
 80042b6:	f000 819c 	beq.w	80045f2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042ba:	1d3b      	adds	r3, r7, #4
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	f040 8114 	bne.w	80044ee <HAL_RCC_OscConfig+0xcbe>
 80042c6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80042ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80042ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	fa93 f2a3 	rbit	r2, r3
 80042da:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80042de:	601a      	str	r2, [r3, #0]
  return result;
 80042e0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80042e4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042e6:	fab3 f383 	clz	r3, r3
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80042f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	461a      	mov	r2, r3
 80042f8:	2300      	movs	r3, #0
 80042fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042fc:	f7fc fc54 	bl	8000ba8 <HAL_GetTick>
 8004300:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004304:	e009      	b.n	800431a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004306:	f7fc fc4f 	bl	8000ba8 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e18b      	b.n	8004632 <HAL_RCC_OscConfig+0xe02>
 800431a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800431e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004322:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004324:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	fa93 f2a3 	rbit	r2, r3
 800432e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004332:	601a      	str	r2, [r3, #0]
  return result;
 8004334:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004338:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800433a:	fab3 f383 	clz	r3, r3
 800433e:	b2db      	uxtb	r3, r3
 8004340:	095b      	lsrs	r3, r3, #5
 8004342:	b2db      	uxtb	r3, r3
 8004344:	f043 0301 	orr.w	r3, r3, #1
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b01      	cmp	r3, #1
 800434c:	d102      	bne.n	8004354 <HAL_RCC_OscConfig+0xb24>
 800434e:	4b49      	ldr	r3, [pc, #292]	; (8004474 <HAL_RCC_OscConfig+0xc44>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	e01b      	b.n	800438c <HAL_RCC_OscConfig+0xb5c>
 8004354:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004358:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800435c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800435e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	fa93 f2a3 	rbit	r2, r3
 8004368:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800436c:	601a      	str	r2, [r3, #0]
 800436e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004372:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004376:	601a      	str	r2, [r3, #0]
 8004378:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	fa93 f2a3 	rbit	r2, r3
 8004382:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	4b3a      	ldr	r3, [pc, #232]	; (8004474 <HAL_RCC_OscConfig+0xc44>)
 800438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004390:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004394:	6011      	str	r1, [r2, #0]
 8004396:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800439a:	6812      	ldr	r2, [r2, #0]
 800439c:	fa92 f1a2 	rbit	r1, r2
 80043a0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80043a4:	6011      	str	r1, [r2, #0]
  return result;
 80043a6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80043aa:	6812      	ldr	r2, [r2, #0]
 80043ac:	fab2 f282 	clz	r2, r2
 80043b0:	b2d2      	uxtb	r2, r2
 80043b2:	f042 0220 	orr.w	r2, r2, #32
 80043b6:	b2d2      	uxtb	r2, r2
 80043b8:	f002 021f 	and.w	r2, r2, #31
 80043bc:	2101      	movs	r1, #1
 80043be:	fa01 f202 	lsl.w	r2, r1, r2
 80043c2:	4013      	ands	r3, r2
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d19e      	bne.n	8004306 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043c8:	4b2a      	ldr	r3, [pc, #168]	; (8004474 <HAL_RCC_OscConfig+0xc44>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80043d0:	1d3b      	adds	r3, r7, #4
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80043d6:	1d3b      	adds	r3, r7, #4
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	430b      	orrs	r3, r1
 80043de:	4925      	ldr	r1, [pc, #148]	; (8004474 <HAL_RCC_OscConfig+0xc44>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	604b      	str	r3, [r1, #4]
 80043e4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80043e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80043ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	fa93 f2a3 	rbit	r2, r3
 80043f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80043fc:	601a      	str	r2, [r3, #0]
  return result;
 80043fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004402:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004404:	fab3 f383 	clz	r3, r3
 8004408:	b2db      	uxtb	r3, r3
 800440a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800440e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	461a      	mov	r2, r3
 8004416:	2301      	movs	r3, #1
 8004418:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800441a:	f7fc fbc5 	bl	8000ba8 <HAL_GetTick>
 800441e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004422:	e009      	b.n	8004438 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004424:	f7fc fbc0 	bl	8000ba8 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b02      	cmp	r3, #2
 8004432:	d901      	bls.n	8004438 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e0fc      	b.n	8004632 <HAL_RCC_OscConfig+0xe02>
 8004438:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800443c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004440:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004442:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	fa93 f2a3 	rbit	r2, r3
 800444c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004450:	601a      	str	r2, [r3, #0]
  return result;
 8004452:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004456:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004458:	fab3 f383 	clz	r3, r3
 800445c:	b2db      	uxtb	r3, r3
 800445e:	095b      	lsrs	r3, r3, #5
 8004460:	b2db      	uxtb	r3, r3
 8004462:	f043 0301 	orr.w	r3, r3, #1
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b01      	cmp	r3, #1
 800446a:	d105      	bne.n	8004478 <HAL_RCC_OscConfig+0xc48>
 800446c:	4b01      	ldr	r3, [pc, #4]	; (8004474 <HAL_RCC_OscConfig+0xc44>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	e01e      	b.n	80044b0 <HAL_RCC_OscConfig+0xc80>
 8004472:	bf00      	nop
 8004474:	40021000 	.word	0x40021000
 8004478:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800447c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004480:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004482:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	fa93 f2a3 	rbit	r2, r3
 800448c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004496:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800449a:	601a      	str	r2, [r3, #0]
 800449c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	fa93 f2a3 	rbit	r2, r3
 80044a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	4b63      	ldr	r3, [pc, #396]	; (800463c <HAL_RCC_OscConfig+0xe0c>)
 80044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80044b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80044b8:	6011      	str	r1, [r2, #0]
 80044ba:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80044be:	6812      	ldr	r2, [r2, #0]
 80044c0:	fa92 f1a2 	rbit	r1, r2
 80044c4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80044c8:	6011      	str	r1, [r2, #0]
  return result;
 80044ca:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80044ce:	6812      	ldr	r2, [r2, #0]
 80044d0:	fab2 f282 	clz	r2, r2
 80044d4:	b2d2      	uxtb	r2, r2
 80044d6:	f042 0220 	orr.w	r2, r2, #32
 80044da:	b2d2      	uxtb	r2, r2
 80044dc:	f002 021f 	and.w	r2, r2, #31
 80044e0:	2101      	movs	r1, #1
 80044e2:	fa01 f202 	lsl.w	r2, r1, r2
 80044e6:	4013      	ands	r3, r2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d09b      	beq.n	8004424 <HAL_RCC_OscConfig+0xbf4>
 80044ec:	e0a0      	b.n	8004630 <HAL_RCC_OscConfig+0xe00>
 80044ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80044f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	fa93 f2a3 	rbit	r2, r3
 8004502:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004506:	601a      	str	r2, [r3, #0]
  return result;
 8004508:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800450c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800450e:	fab3 f383 	clz	r3, r3
 8004512:	b2db      	uxtb	r3, r3
 8004514:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004518:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	461a      	mov	r2, r3
 8004520:	2300      	movs	r3, #0
 8004522:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004524:	f7fc fb40 	bl	8000ba8 <HAL_GetTick>
 8004528:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800452c:	e009      	b.n	8004542 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800452e:	f7fc fb3b 	bl	8000ba8 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e077      	b.n	8004632 <HAL_RCC_OscConfig+0xe02>
 8004542:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004546:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800454a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	fa93 f2a3 	rbit	r2, r3
 8004556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800455a:	601a      	str	r2, [r3, #0]
  return result;
 800455c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004560:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004562:	fab3 f383 	clz	r3, r3
 8004566:	b2db      	uxtb	r3, r3
 8004568:	095b      	lsrs	r3, r3, #5
 800456a:	b2db      	uxtb	r3, r3
 800456c:	f043 0301 	orr.w	r3, r3, #1
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b01      	cmp	r3, #1
 8004574:	d102      	bne.n	800457c <HAL_RCC_OscConfig+0xd4c>
 8004576:	4b31      	ldr	r3, [pc, #196]	; (800463c <HAL_RCC_OscConfig+0xe0c>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	e01b      	b.n	80045b4 <HAL_RCC_OscConfig+0xd84>
 800457c:	f107 0320 	add.w	r3, r7, #32
 8004580:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004584:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004586:	f107 0320 	add.w	r3, r7, #32
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	fa93 f2a3 	rbit	r2, r3
 8004590:	f107 031c 	add.w	r3, r7, #28
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	f107 0318 	add.w	r3, r7, #24
 800459a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800459e:	601a      	str	r2, [r3, #0]
 80045a0:	f107 0318 	add.w	r3, r7, #24
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	fa93 f2a3 	rbit	r2, r3
 80045aa:	f107 0314 	add.w	r3, r7, #20
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	4b22      	ldr	r3, [pc, #136]	; (800463c <HAL_RCC_OscConfig+0xe0c>)
 80045b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b4:	f107 0210 	add.w	r2, r7, #16
 80045b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80045bc:	6011      	str	r1, [r2, #0]
 80045be:	f107 0210 	add.w	r2, r7, #16
 80045c2:	6812      	ldr	r2, [r2, #0]
 80045c4:	fa92 f1a2 	rbit	r1, r2
 80045c8:	f107 020c 	add.w	r2, r7, #12
 80045cc:	6011      	str	r1, [r2, #0]
  return result;
 80045ce:	f107 020c 	add.w	r2, r7, #12
 80045d2:	6812      	ldr	r2, [r2, #0]
 80045d4:	fab2 f282 	clz	r2, r2
 80045d8:	b2d2      	uxtb	r2, r2
 80045da:	f042 0220 	orr.w	r2, r2, #32
 80045de:	b2d2      	uxtb	r2, r2
 80045e0:	f002 021f 	and.w	r2, r2, #31
 80045e4:	2101      	movs	r1, #1
 80045e6:	fa01 f202 	lsl.w	r2, r1, r2
 80045ea:	4013      	ands	r3, r2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d19e      	bne.n	800452e <HAL_RCC_OscConfig+0xcfe>
 80045f0:	e01e      	b.n	8004630 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045f2:	1d3b      	adds	r3, r7, #4
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	69db      	ldr	r3, [r3, #28]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d101      	bne.n	8004600 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e018      	b.n	8004632 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004600:	4b0e      	ldr	r3, [pc, #56]	; (800463c <HAL_RCC_OscConfig+0xe0c>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004608:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800460c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004610:	1d3b      	adds	r3, r7, #4
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	429a      	cmp	r2, r3
 8004618:	d108      	bne.n	800462c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800461a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800461e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004622:	1d3b      	adds	r3, r7, #4
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004628:	429a      	cmp	r2, r3
 800462a:	d001      	beq.n	8004630 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e000      	b.n	8004632 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	40021000 	.word	0x40021000

08004640 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b09e      	sub	sp, #120	; 0x78
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800464a:	2300      	movs	r3, #0
 800464c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d101      	bne.n	8004658 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e162      	b.n	800491e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004658:	4b90      	ldr	r3, [pc, #576]	; (800489c <HAL_RCC_ClockConfig+0x25c>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0307 	and.w	r3, r3, #7
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	429a      	cmp	r2, r3
 8004664:	d910      	bls.n	8004688 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004666:	4b8d      	ldr	r3, [pc, #564]	; (800489c <HAL_RCC_ClockConfig+0x25c>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f023 0207 	bic.w	r2, r3, #7
 800466e:	498b      	ldr	r1, [pc, #556]	; (800489c <HAL_RCC_ClockConfig+0x25c>)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	4313      	orrs	r3, r2
 8004674:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004676:	4b89      	ldr	r3, [pc, #548]	; (800489c <HAL_RCC_ClockConfig+0x25c>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0307 	and.w	r3, r3, #7
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	429a      	cmp	r2, r3
 8004682:	d001      	beq.n	8004688 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e14a      	b.n	800491e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d008      	beq.n	80046a6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004694:	4b82      	ldr	r3, [pc, #520]	; (80048a0 <HAL_RCC_ClockConfig+0x260>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	497f      	ldr	r1, [pc, #508]	; (80048a0 <HAL_RCC_ClockConfig+0x260>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	f000 80dc 	beq.w	800486c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d13c      	bne.n	8004736 <HAL_RCC_ClockConfig+0xf6>
 80046bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046c0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046c4:	fa93 f3a3 	rbit	r3, r3
 80046c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80046ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046cc:	fab3 f383 	clz	r3, r3
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	095b      	lsrs	r3, r3, #5
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	f043 0301 	orr.w	r3, r3, #1
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d102      	bne.n	80046e6 <HAL_RCC_ClockConfig+0xa6>
 80046e0:	4b6f      	ldr	r3, [pc, #444]	; (80048a0 <HAL_RCC_ClockConfig+0x260>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	e00f      	b.n	8004706 <HAL_RCC_ClockConfig+0xc6>
 80046e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046ee:	fa93 f3a3 	rbit	r3, r3
 80046f2:	667b      	str	r3, [r7, #100]	; 0x64
 80046f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046f8:	663b      	str	r3, [r7, #96]	; 0x60
 80046fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046fc:	fa93 f3a3 	rbit	r3, r3
 8004700:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004702:	4b67      	ldr	r3, [pc, #412]	; (80048a0 <HAL_RCC_ClockConfig+0x260>)
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800470a:	65ba      	str	r2, [r7, #88]	; 0x58
 800470c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800470e:	fa92 f2a2 	rbit	r2, r2
 8004712:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004714:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004716:	fab2 f282 	clz	r2, r2
 800471a:	b2d2      	uxtb	r2, r2
 800471c:	f042 0220 	orr.w	r2, r2, #32
 8004720:	b2d2      	uxtb	r2, r2
 8004722:	f002 021f 	and.w	r2, r2, #31
 8004726:	2101      	movs	r1, #1
 8004728:	fa01 f202 	lsl.w	r2, r1, r2
 800472c:	4013      	ands	r3, r2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d17b      	bne.n	800482a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e0f3      	b.n	800491e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	2b02      	cmp	r3, #2
 800473c:	d13c      	bne.n	80047b8 <HAL_RCC_ClockConfig+0x178>
 800473e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004742:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004744:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004746:	fa93 f3a3 	rbit	r3, r3
 800474a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800474c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800474e:	fab3 f383 	clz	r3, r3
 8004752:	b2db      	uxtb	r3, r3
 8004754:	095b      	lsrs	r3, r3, #5
 8004756:	b2db      	uxtb	r3, r3
 8004758:	f043 0301 	orr.w	r3, r3, #1
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b01      	cmp	r3, #1
 8004760:	d102      	bne.n	8004768 <HAL_RCC_ClockConfig+0x128>
 8004762:	4b4f      	ldr	r3, [pc, #316]	; (80048a0 <HAL_RCC_ClockConfig+0x260>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	e00f      	b.n	8004788 <HAL_RCC_ClockConfig+0x148>
 8004768:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800476c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800476e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004770:	fa93 f3a3 	rbit	r3, r3
 8004774:	647b      	str	r3, [r7, #68]	; 0x44
 8004776:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800477a:	643b      	str	r3, [r7, #64]	; 0x40
 800477c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800477e:	fa93 f3a3 	rbit	r3, r3
 8004782:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004784:	4b46      	ldr	r3, [pc, #280]	; (80048a0 <HAL_RCC_ClockConfig+0x260>)
 8004786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004788:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800478c:	63ba      	str	r2, [r7, #56]	; 0x38
 800478e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004790:	fa92 f2a2 	rbit	r2, r2
 8004794:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004796:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004798:	fab2 f282 	clz	r2, r2
 800479c:	b2d2      	uxtb	r2, r2
 800479e:	f042 0220 	orr.w	r2, r2, #32
 80047a2:	b2d2      	uxtb	r2, r2
 80047a4:	f002 021f 	and.w	r2, r2, #31
 80047a8:	2101      	movs	r1, #1
 80047aa:	fa01 f202 	lsl.w	r2, r1, r2
 80047ae:	4013      	ands	r3, r2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d13a      	bne.n	800482a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e0b2      	b.n	800491e <HAL_RCC_ClockConfig+0x2de>
 80047b8:	2302      	movs	r3, #2
 80047ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047be:	fa93 f3a3 	rbit	r3, r3
 80047c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80047c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047c6:	fab3 f383 	clz	r3, r3
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	095b      	lsrs	r3, r3, #5
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	f043 0301 	orr.w	r3, r3, #1
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d102      	bne.n	80047e0 <HAL_RCC_ClockConfig+0x1a0>
 80047da:	4b31      	ldr	r3, [pc, #196]	; (80048a0 <HAL_RCC_ClockConfig+0x260>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	e00d      	b.n	80047fc <HAL_RCC_ClockConfig+0x1bc>
 80047e0:	2302      	movs	r3, #2
 80047e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e6:	fa93 f3a3 	rbit	r3, r3
 80047ea:	627b      	str	r3, [r7, #36]	; 0x24
 80047ec:	2302      	movs	r3, #2
 80047ee:	623b      	str	r3, [r7, #32]
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	fa93 f3a3 	rbit	r3, r3
 80047f6:	61fb      	str	r3, [r7, #28]
 80047f8:	4b29      	ldr	r3, [pc, #164]	; (80048a0 <HAL_RCC_ClockConfig+0x260>)
 80047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fc:	2202      	movs	r2, #2
 80047fe:	61ba      	str	r2, [r7, #24]
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	fa92 f2a2 	rbit	r2, r2
 8004806:	617a      	str	r2, [r7, #20]
  return result;
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	fab2 f282 	clz	r2, r2
 800480e:	b2d2      	uxtb	r2, r2
 8004810:	f042 0220 	orr.w	r2, r2, #32
 8004814:	b2d2      	uxtb	r2, r2
 8004816:	f002 021f 	and.w	r2, r2, #31
 800481a:	2101      	movs	r1, #1
 800481c:	fa01 f202 	lsl.w	r2, r1, r2
 8004820:	4013      	ands	r3, r2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e079      	b.n	800491e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800482a:	4b1d      	ldr	r3, [pc, #116]	; (80048a0 <HAL_RCC_ClockConfig+0x260>)
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f023 0203 	bic.w	r2, r3, #3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	491a      	ldr	r1, [pc, #104]	; (80048a0 <HAL_RCC_ClockConfig+0x260>)
 8004838:	4313      	orrs	r3, r2
 800483a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800483c:	f7fc f9b4 	bl	8000ba8 <HAL_GetTick>
 8004840:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004842:	e00a      	b.n	800485a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004844:	f7fc f9b0 	bl	8000ba8 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004852:	4293      	cmp	r3, r2
 8004854:	d901      	bls.n	800485a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e061      	b.n	800491e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800485a:	4b11      	ldr	r3, [pc, #68]	; (80048a0 <HAL_RCC_ClockConfig+0x260>)
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f003 020c 	and.w	r2, r3, #12
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	429a      	cmp	r2, r3
 800486a:	d1eb      	bne.n	8004844 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800486c:	4b0b      	ldr	r3, [pc, #44]	; (800489c <HAL_RCC_ClockConfig+0x25c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0307 	and.w	r3, r3, #7
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	429a      	cmp	r2, r3
 8004878:	d214      	bcs.n	80048a4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800487a:	4b08      	ldr	r3, [pc, #32]	; (800489c <HAL_RCC_ClockConfig+0x25c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f023 0207 	bic.w	r2, r3, #7
 8004882:	4906      	ldr	r1, [pc, #24]	; (800489c <HAL_RCC_ClockConfig+0x25c>)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	4313      	orrs	r3, r2
 8004888:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800488a:	4b04      	ldr	r3, [pc, #16]	; (800489c <HAL_RCC_ClockConfig+0x25c>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0307 	and.w	r3, r3, #7
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	429a      	cmp	r2, r3
 8004896:	d005      	beq.n	80048a4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e040      	b.n	800491e <HAL_RCC_ClockConfig+0x2de>
 800489c:	40022000 	.word	0x40022000
 80048a0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0304 	and.w	r3, r3, #4
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d008      	beq.n	80048c2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048b0:	4b1d      	ldr	r3, [pc, #116]	; (8004928 <HAL_RCC_ClockConfig+0x2e8>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	491a      	ldr	r1, [pc, #104]	; (8004928 <HAL_RCC_ClockConfig+0x2e8>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0308 	and.w	r3, r3, #8
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d009      	beq.n	80048e2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048ce:	4b16      	ldr	r3, [pc, #88]	; (8004928 <HAL_RCC_ClockConfig+0x2e8>)
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	00db      	lsls	r3, r3, #3
 80048dc:	4912      	ldr	r1, [pc, #72]	; (8004928 <HAL_RCC_ClockConfig+0x2e8>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80048e2:	f000 f829 	bl	8004938 <HAL_RCC_GetSysClockFreq>
 80048e6:	4601      	mov	r1, r0
 80048e8:	4b0f      	ldr	r3, [pc, #60]	; (8004928 <HAL_RCC_ClockConfig+0x2e8>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048f0:	22f0      	movs	r2, #240	; 0xf0
 80048f2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	fa92 f2a2 	rbit	r2, r2
 80048fa:	60fa      	str	r2, [r7, #12]
  return result;
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	fab2 f282 	clz	r2, r2
 8004902:	b2d2      	uxtb	r2, r2
 8004904:	40d3      	lsrs	r3, r2
 8004906:	4a09      	ldr	r2, [pc, #36]	; (800492c <HAL_RCC_ClockConfig+0x2ec>)
 8004908:	5cd3      	ldrb	r3, [r2, r3]
 800490a:	fa21 f303 	lsr.w	r3, r1, r3
 800490e:	4a08      	ldr	r2, [pc, #32]	; (8004930 <HAL_RCC_ClockConfig+0x2f0>)
 8004910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004912:	4b08      	ldr	r3, [pc, #32]	; (8004934 <HAL_RCC_ClockConfig+0x2f4>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4618      	mov	r0, r3
 8004918:	f7fc f902 	bl	8000b20 <HAL_InitTick>
  
  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3778      	adds	r7, #120	; 0x78
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	40021000 	.word	0x40021000
 800492c:	08004ce8 	.word	0x08004ce8
 8004930:	20000000 	.word	0x20000000
 8004934:	20000004 	.word	0x20000004

08004938 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004938:	b480      	push	{r7}
 800493a:	b08b      	sub	sp, #44	; 0x2c
 800493c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800493e:	2300      	movs	r3, #0
 8004940:	61fb      	str	r3, [r7, #28]
 8004942:	2300      	movs	r3, #0
 8004944:	61bb      	str	r3, [r7, #24]
 8004946:	2300      	movs	r3, #0
 8004948:	627b      	str	r3, [r7, #36]	; 0x24
 800494a:	2300      	movs	r3, #0
 800494c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800494e:	2300      	movs	r3, #0
 8004950:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004952:	4b29      	ldr	r3, [pc, #164]	; (80049f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	f003 030c 	and.w	r3, r3, #12
 800495e:	2b04      	cmp	r3, #4
 8004960:	d002      	beq.n	8004968 <HAL_RCC_GetSysClockFreq+0x30>
 8004962:	2b08      	cmp	r3, #8
 8004964:	d003      	beq.n	800496e <HAL_RCC_GetSysClockFreq+0x36>
 8004966:	e03c      	b.n	80049e2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004968:	4b24      	ldr	r3, [pc, #144]	; (80049fc <HAL_RCC_GetSysClockFreq+0xc4>)
 800496a:	623b      	str	r3, [r7, #32]
      break;
 800496c:	e03c      	b.n	80049e8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004974:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004978:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800497a:	68ba      	ldr	r2, [r7, #8]
 800497c:	fa92 f2a2 	rbit	r2, r2
 8004980:	607a      	str	r2, [r7, #4]
  return result;
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	fab2 f282 	clz	r2, r2
 8004988:	b2d2      	uxtb	r2, r2
 800498a:	40d3      	lsrs	r3, r2
 800498c:	4a1c      	ldr	r2, [pc, #112]	; (8004a00 <HAL_RCC_GetSysClockFreq+0xc8>)
 800498e:	5cd3      	ldrb	r3, [r2, r3]
 8004990:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004992:	4b19      	ldr	r3, [pc, #100]	; (80049f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004996:	f003 030f 	and.w	r3, r3, #15
 800499a:	220f      	movs	r2, #15
 800499c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	fa92 f2a2 	rbit	r2, r2
 80049a4:	60fa      	str	r2, [r7, #12]
  return result;
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	fab2 f282 	clz	r2, r2
 80049ac:	b2d2      	uxtb	r2, r2
 80049ae:	40d3      	lsrs	r3, r2
 80049b0:	4a14      	ldr	r2, [pc, #80]	; (8004a04 <HAL_RCC_GetSysClockFreq+0xcc>)
 80049b2:	5cd3      	ldrb	r3, [r2, r3]
 80049b4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d008      	beq.n	80049d2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80049c0:	4a0e      	ldr	r2, [pc, #56]	; (80049fc <HAL_RCC_GetSysClockFreq+0xc4>)
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	fb02 f303 	mul.w	r3, r2, r3
 80049ce:	627b      	str	r3, [r7, #36]	; 0x24
 80049d0:	e004      	b.n	80049dc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	4a0c      	ldr	r2, [pc, #48]	; (8004a08 <HAL_RCC_GetSysClockFreq+0xd0>)
 80049d6:	fb02 f303 	mul.w	r3, r2, r3
 80049da:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80049dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049de:	623b      	str	r3, [r7, #32]
      break;
 80049e0:	e002      	b.n	80049e8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80049e2:	4b06      	ldr	r3, [pc, #24]	; (80049fc <HAL_RCC_GetSysClockFreq+0xc4>)
 80049e4:	623b      	str	r3, [r7, #32]
      break;
 80049e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049e8:	6a3b      	ldr	r3, [r7, #32]
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	372c      	adds	r7, #44	; 0x2c
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	40021000 	.word	0x40021000
 80049fc:	007a1200 	.word	0x007a1200
 8004a00:	08004cf8 	.word	0x08004cf8
 8004a04:	08004d08 	.word	0x08004d08
 8004a08:	003d0900 	.word	0x003d0900

08004a0c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b092      	sub	sp, #72	; 0x48
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a14:	2300      	movs	r3, #0
 8004a16:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f000 80d0 	beq.w	8004bca <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a30:	4b8e      	ldr	r3, [pc, #568]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a32:	69db      	ldr	r3, [r3, #28]
 8004a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d10e      	bne.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a3c:	4b8b      	ldr	r3, [pc, #556]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a3e:	69db      	ldr	r3, [r3, #28]
 8004a40:	4a8a      	ldr	r2, [pc, #552]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a46:	61d3      	str	r3, [r2, #28]
 8004a48:	4b88      	ldr	r3, [pc, #544]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a4a:	69db      	ldr	r3, [r3, #28]
 8004a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a50:	60bb      	str	r3, [r7, #8]
 8004a52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a54:	2301      	movs	r3, #1
 8004a56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a5a:	4b85      	ldr	r3, [pc, #532]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d118      	bne.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a66:	4b82      	ldr	r3, [pc, #520]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a81      	ldr	r2, [pc, #516]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a70:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a72:	f7fc f899 	bl	8000ba8 <HAL_GetTick>
 8004a76:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a78:	e008      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a7a:	f7fc f895 	bl	8000ba8 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	2b64      	cmp	r3, #100	; 0x64
 8004a86:	d901      	bls.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e0ea      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a8c:	4b78      	ldr	r3, [pc, #480]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d0f0      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a98:	4b74      	ldr	r3, [pc, #464]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d07d      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ab0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d076      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ab6:	4b6d      	ldr	r3, [pc, #436]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004abe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ac0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ac4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac8:	fa93 f3a3 	rbit	r3, r3
 8004acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ad0:	fab3 f383 	clz	r3, r3
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	4b66      	ldr	r3, [pc, #408]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ada:	4413      	add	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	461a      	mov	r2, r3
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	6013      	str	r3, [r2, #0]
 8004ae4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ae8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aec:	fa93 f3a3 	rbit	r3, r3
 8004af0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004af4:	fab3 f383 	clz	r3, r3
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	461a      	mov	r2, r3
 8004afc:	4b5d      	ldr	r3, [pc, #372]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004afe:	4413      	add	r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	461a      	mov	r2, r3
 8004b04:	2300      	movs	r3, #0
 8004b06:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004b08:	4a58      	ldr	r2, [pc, #352]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b0c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d045      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b18:	f7fc f846 	bl	8000ba8 <HAL_GetTick>
 8004b1c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b1e:	e00a      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b20:	f7fc f842 	bl	8000ba8 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d901      	bls.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e095      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8004b36:	2302      	movs	r3, #2
 8004b38:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3c:	fa93 f3a3 	rbit	r3, r3
 8004b40:	627b      	str	r3, [r7, #36]	; 0x24
 8004b42:	2302      	movs	r3, #2
 8004b44:	623b      	str	r3, [r7, #32]
 8004b46:	6a3b      	ldr	r3, [r7, #32]
 8004b48:	fa93 f3a3 	rbit	r3, r3
 8004b4c:	61fb      	str	r3, [r7, #28]
  return result;
 8004b4e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b50:	fab3 f383 	clz	r3, r3
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	095b      	lsrs	r3, r3, #5
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	f043 0302 	orr.w	r3, r3, #2
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d102      	bne.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004b64:	4b41      	ldr	r3, [pc, #260]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b66:	6a1b      	ldr	r3, [r3, #32]
 8004b68:	e007      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004b6a:	2302      	movs	r3, #2
 8004b6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	fa93 f3a3 	rbit	r3, r3
 8004b74:	617b      	str	r3, [r7, #20]
 8004b76:	4b3d      	ldr	r3, [pc, #244]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	613a      	str	r2, [r7, #16]
 8004b7e:	693a      	ldr	r2, [r7, #16]
 8004b80:	fa92 f2a2 	rbit	r2, r2
 8004b84:	60fa      	str	r2, [r7, #12]
  return result;
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	fab2 f282 	clz	r2, r2
 8004b8c:	b2d2      	uxtb	r2, r2
 8004b8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b92:	b2d2      	uxtb	r2, r2
 8004b94:	f002 021f 	and.w	r2, r2, #31
 8004b98:	2101      	movs	r1, #1
 8004b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d0bd      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004ba4:	4b31      	ldr	r3, [pc, #196]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ba6:	6a1b      	ldr	r3, [r3, #32]
 8004ba8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	492e      	ldr	r1, [pc, #184]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004bb6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d105      	bne.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bbe:	4b2b      	ldr	r3, [pc, #172]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	4a2a      	ldr	r2, [pc, #168]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bc8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0301 	and.w	r3, r3, #1
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d008      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bd6:	4b25      	ldr	r3, [pc, #148]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bda:	f023 0203 	bic.w	r2, r3, #3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	4922      	ldr	r1, [pc, #136]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0320 	and.w	r3, r3, #32
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d008      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bf4:	4b1d      	ldr	r3, [pc, #116]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf8:	f023 0210 	bic.w	r2, r3, #16
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	491a      	ldr	r1, [pc, #104]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d008      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004c12:	4b16      	ldr	r3, [pc, #88]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c16:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	4913      	ldr	r1, [pc, #76]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d008      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004c30:	4b0e      	ldr	r3, [pc, #56]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	490b      	ldr	r1, [pc, #44]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d008      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004c4e:	4b07      	ldr	r3, [pc, #28]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	4904      	ldr	r1, [pc, #16]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3748      	adds	r7, #72	; 0x48
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	40021000 	.word	0x40021000
 8004c70:	40007000 	.word	0x40007000
 8004c74:	10908100 	.word	0x10908100

08004c78 <__libc_init_array>:
 8004c78:	b570      	push	{r4, r5, r6, lr}
 8004c7a:	4e0d      	ldr	r6, [pc, #52]	; (8004cb0 <__libc_init_array+0x38>)
 8004c7c:	4c0d      	ldr	r4, [pc, #52]	; (8004cb4 <__libc_init_array+0x3c>)
 8004c7e:	1ba4      	subs	r4, r4, r6
 8004c80:	10a4      	asrs	r4, r4, #2
 8004c82:	2500      	movs	r5, #0
 8004c84:	42a5      	cmp	r5, r4
 8004c86:	d109      	bne.n	8004c9c <__libc_init_array+0x24>
 8004c88:	4e0b      	ldr	r6, [pc, #44]	; (8004cb8 <__libc_init_array+0x40>)
 8004c8a:	4c0c      	ldr	r4, [pc, #48]	; (8004cbc <__libc_init_array+0x44>)
 8004c8c:	f000 f820 	bl	8004cd0 <_init>
 8004c90:	1ba4      	subs	r4, r4, r6
 8004c92:	10a4      	asrs	r4, r4, #2
 8004c94:	2500      	movs	r5, #0
 8004c96:	42a5      	cmp	r5, r4
 8004c98:	d105      	bne.n	8004ca6 <__libc_init_array+0x2e>
 8004c9a:	bd70      	pop	{r4, r5, r6, pc}
 8004c9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ca0:	4798      	blx	r3
 8004ca2:	3501      	adds	r5, #1
 8004ca4:	e7ee      	b.n	8004c84 <__libc_init_array+0xc>
 8004ca6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004caa:	4798      	blx	r3
 8004cac:	3501      	adds	r5, #1
 8004cae:	e7f2      	b.n	8004c96 <__libc_init_array+0x1e>
 8004cb0:	08004d18 	.word	0x08004d18
 8004cb4:	08004d18 	.word	0x08004d18
 8004cb8:	08004d18 	.word	0x08004d18
 8004cbc:	08004d1c 	.word	0x08004d1c

08004cc0 <memset>:
 8004cc0:	4402      	add	r2, r0
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d100      	bne.n	8004cca <memset+0xa>
 8004cc8:	4770      	bx	lr
 8004cca:	f803 1b01 	strb.w	r1, [r3], #1
 8004cce:	e7f9      	b.n	8004cc4 <memset+0x4>

08004cd0 <_init>:
 8004cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cd2:	bf00      	nop
 8004cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cd6:	bc08      	pop	{r3}
 8004cd8:	469e      	mov	lr, r3
 8004cda:	4770      	bx	lr

08004cdc <_fini>:
 8004cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cde:	bf00      	nop
 8004ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ce2:	bc08      	pop	{r3}
 8004ce4:	469e      	mov	lr, r3
 8004ce6:	4770      	bx	lr
